// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Resource {
    #[prost(oneof="resource::Resource", tags="1, 2, 3, 4")]
    pub resource: ::core::option::Option<resource::Resource>,
}
/// Nested message and enum types in `Resource`.
pub mod resource {
    #[derive(::strum::EnumDiscriminants)]
    #[strum_discriminants(name(ObjectLabel))]
    #[strum_discriminants(derive(::strum::AsRefStr, ::strum::Display, ::strum::EnumIter, ::strum::EnumString), strum(serialize_all = "snake_case"))]
    #[strum_discriminants(cfg_attr(feature = "sqlx", derive(::sqlx::Type)))]
    #[strum_discriminants(cfg_attr(feature = "sqlx", sqlx(type_name = "object_label", rename_all = "snake_case")))]
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Resource {
        #[prost(message, tag="1")]
        ShareInfo(super::super::catalog::v1::ShareInfo),
        #[prost(message, tag="2")]
        SchemaInfo(super::super::catalog::v1::SchemaInfo),
        #[prost(message, tag="3")]
        Credential(super::super::catalog::v1::Credential),
        #[prost(message, tag="4")]
        StorageLocation(super::super::catalog::v1::StorageLocation),
    }
}
include!("delta_sharing.internal.serde.rs");
// @@protoc_insertion_point(module)
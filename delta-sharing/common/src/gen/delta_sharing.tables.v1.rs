// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TableInfo {
    /// Name of table, relative to parent schema.
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    /// Name of parent schema.
    #[prost(string, tag="2")]
    pub schema_name: ::prost::alloc::string::String,
    /// Name of parent catalog.
    #[prost(string, tag="3")]
    pub catalog_name: ::prost::alloc::string::String,
    #[prost(enumeration="TableType", tag="4")]
    pub table_type: i32,
    /// Data source format of the table.
    #[prost(enumeration="DataSourceFormat", tag="5")]
    pub data_source_format: i32,
    /// User-provided free-form text description.
    #[prost(string, optional, tag="7")]
    pub comment: ::core::option::Option<::prost::alloc::string::String>,
    /// A map of key-value properties attached to the securable.
    #[prost(message, optional, tag="8")]
    pub properties: ::core::option::Option<::pbjson_types::Struct>,
    /// Full name of table, in form of catalog_name.schema_name.table_name.
    #[prost(string, optional, tag="9")]
    pub full_name: ::core::option::Option<::prost::alloc::string::String>,
    /// Username of current owner of table.
    #[prost(string, optional, tag="10")]
    pub owner: ::core::option::Option<::prost::alloc::string::String>,
    /// Time at which this table was created, in epoch milliseconds.
    #[prost(int64, optional, tag="11")]
    pub create_at: ::core::option::Option<i64>,
    /// Username of table creator.
    #[prost(string, optional, tag="12")]
    pub created_by: ::core::option::Option<::prost::alloc::string::String>,
    /// Time at which this table was last updated, in epoch milliseconds.
    #[prost(int64, optional, tag="13")]
    pub update_at: ::core::option::Option<i64>,
    /// Username of user who last modified table.
    #[prost(string, optional, tag="14")]
    pub updated_by: ::core::option::Option<::prost::alloc::string::String>,
    /// Unique identifier for the table.
    #[prost(string, optional, tag="15")]
    pub table_id: ::core::option::Option<::prost::alloc::string::String>,
}
/// The type of the table.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TableType {
    Unspecified = 0,
    Managed = 1,
    External = 2,
}
impl TableType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            TableType::Unspecified => "TABLE_TYPE_UNSPECIFIED",
            TableType::Managed => "MANAGED",
            TableType::External => "EXTERNAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TABLE_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "MANAGED" => Some(Self::Managed),
            "EXTERNAL" => Some(Self::External),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DataSourceFormat {
    Unspecified = 0,
    Delta = 1,
    Iceberg = 2,
    Hudi = 3,
    Parquet = 4,
    Csv = 5,
    Json = 6,
    Orc = 7,
    Avro = 8,
    Text = 9,
    UnityCatalog = 10,
    Deltasharing = 11,
}
impl DataSourceFormat {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            DataSourceFormat::Unspecified => "DATA_SOURCE_FORMAT_UNSPECIFIED",
            DataSourceFormat::Delta => "DELTA",
            DataSourceFormat::Iceberg => "ICEBERG",
            DataSourceFormat::Hudi => "HUDI",
            DataSourceFormat::Parquet => "PARQUET",
            DataSourceFormat::Csv => "CSV",
            DataSourceFormat::Json => "JSON",
            DataSourceFormat::Orc => "ORC",
            DataSourceFormat::Avro => "AVRO",
            DataSourceFormat::Text => "TEXT",
            DataSourceFormat::UnityCatalog => "UNITY_CATALOG",
            DataSourceFormat::Deltasharing => "DELTASHARING",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DATA_SOURCE_FORMAT_UNSPECIFIED" => Some(Self::Unspecified),
            "DELTA" => Some(Self::Delta),
            "ICEBERG" => Some(Self::Iceberg),
            "HUDI" => Some(Self::Hudi),
            "PARQUET" => Some(Self::Parquet),
            "CSV" => Some(Self::Csv),
            "JSON" => Some(Self::Json),
            "ORC" => Some(Self::Orc),
            "AVRO" => Some(Self::Avro),
            "TEXT" => Some(Self::Text),
            "UNITY_CATALOG" => Some(Self::UnityCatalog),
            "DELTASHARING" => Some(Self::Deltasharing),
            _ => None,
        }
    }
}
include!("delta_sharing.tables.v1.serde.rs");
// @@protoc_insertion_point(module)
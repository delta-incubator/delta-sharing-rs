syntax = "proto3";

package delta_sharing.catalog.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/struct.proto";
import "openapiv3/annotations.proto";

enum TableType {
  UNSPECIFIED = 0;
  DELTA = 1;
  ICEBERG = 2;
  HUDI = 3;
  PARQUET = 4;
}

message ShareInfo {
  string id = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  string name = 2 [
    (buf.validate.field).string.min_len = 1,
    (google.api.field_behavior) = IDENTIFIER
  ];

  optional string description = 3 [(google.api.field_behavior) = OPTIONAL];

  optional google.protobuf.Struct properties = 4 [(google.api.field_behavior) = OPTIONAL];
}

message SchemaInfo {
  string id = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  string name = 2 [
    (buf.validate.field).string.min_len = 1,
    (google.api.field_behavior) = IDENTIFIER
  ];

  string share = 3 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.resource_reference) = {type: "sharing.delta.io/Share"}
  ];

  optional string share_id = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  optional string description = 5 [(google.api.field_behavior) = OPTIONAL];

  optional google.protobuf.Struct properties = 6 [(google.api.field_behavior) = OPTIONAL];
}

/// Register a new table in the Delta Sharing service.
message CreateTableRequest {
  string catalog_name = 1;
  string schema_name = 2;
  google.protobuf.Struct properties = 3;
}

/// Response to CreateTableRequest.
message CreateTableResponse {
  string table_uri = 1;
}

message CreateShareRequest {
  ShareInfo share = 1 [(google.api.field_behavior) = REQUIRED];
}

message DeleteShareRequest {
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "sharing.delta.io/Share"}
  ];
}

message CreateSchemaRequest {
  string share = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "sharing.delta.io/Share"}
  ];
  SchemaInfo schema = 2 [(google.api.field_behavior) = REQUIRED];
}

message DeleteSchemaRequest {
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "sharing.delta.io/Schema"}
  ];

  string share = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "sharing.delta.io/Share"}
  ];
}

service CatalogService {
  // Create a new Share in the Delta Sharing service.
  rpc CreateShare(CreateShareRequest) returns (ShareInfo) {
    option (google.api.http) = {
      post: "/shares"
      body: "share"
    };
    option (openapi.v3.operation) = {
      tags: [
        "shares",
        "unofficial"
      ]
      operation_id: "CreateShare"
    };
  }

  // Delete a Share in the Delta Sharing service.
  rpc DeleteShare(DeleteShareRequest) returns (ShareInfo) {
    option (google.api.http) = {delete: "/shares/{name}"};
    option (openapi.v3.operation) = {
      tags: [
        "shares",
        "unofficial"
      ]
      operation_id: "DeleteShare"
    };
  }

  // Create a new Schema in the Delta Sharing service.
  rpc CreateSchema(CreateSchemaRequest) returns (SchemaInfo) {
    option (google.api.http) = {
      post: "/shares/{share}/schemas"
      body: "schema"
    };
    option (openapi.v3.operation) = {
      tags: [
        "schemas",
        "unofficial"
      ]
      operation_id: "CreateSchema"
    };
  }

  // Delete a Schema in the Delta Sharing service.
  rpc DeleteSchema(DeleteSchemaRequest) returns (SchemaInfo) {
    option (google.api.http) = {delete: "/shares/{share}/schemas/{name}"};
    option (openapi.v3.operation) = {
      tags: [
        "schemas",
        "unofficial"
      ]
      operation_id: "DeleteSchema"
    };
  }
}

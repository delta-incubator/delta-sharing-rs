syntax = "proto3";

package delta_sharing.schemas.v1;

import "buf/validate/validate.proto";
import "delta_sharing/schemas/v1/models.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "openapiv3/annotations.proto";

// List Schemas in a catalog
message ListSchemasRequest {
  // Name of parent catalog.
  string catalog_name = 1 [
    (buf.validate.field).string.pattern = "^[a-z][0-9a-z_]*[0-9a-z]$",
    (google.api.field_behavior) = REQUIRED
  ];

  // The maximum number of results per page that should be returned.
  optional int32 max_results = 2 [
    (buf.validate.field).int32.gt = 0,
    (buf.validate.field).int32.lt = 1000,
    (google.api.field_behavior) = OPTIONAL
  ];

  // Opaque pagination token to go to next page based on previous query.
  optional string page_token = 3 [(google.api.field_behavior) = OPTIONAL];

  // Whether to include schemas in the response for which the principal can only access selective metadata for
  optional bool include_browse = 4 [(google.api.field_behavior) = OPTIONAL];
}

// List Schemas response.
message ListSchemasResponse {
  // The schemas returned.
  repeated SchemaInfo schemas = 1;

  // The next_page_token value to include in the next List request.
  optional string next_page_token = 2;
}

// Create a new Schema
message CreateSchemaRequest {
  // Name of schema, relative to parent catalog.
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // Name of parent catalog.
  string catalog_name = 2 [(google.api.field_behavior) = REQUIRED];

  // User-provided free-form text description.
  optional string comment = 3 [(google.api.field_behavior) = OPTIONAL];

  // A map of key-value properties attached to the securable.
  optional google.protobuf.Struct properties = 4 [(google.api.field_behavior) = OPTIONAL];
}

// Get a Schema
message GetSchemaRequest {
  // Full name of schema.
  //
  // Format: catalog_name.schema_name
  string full_name = 1 [
    (buf.validate.field).string.pattern = "^[a-z][0-9a-z._]*[0-9a-z]$",
    (google.api.field_behavior) = REQUIRED
  ];
}

// Update a Schema
message UpdateSchemaRequest {
  // Full name of schema, in form of catalog_name.schema_name.
  string full_name = 1 [
    (buf.validate.field).string.pattern = "^[a-z][0-9a-z._]*[0-9a-z]$",
    (google.api.field_behavior) = REQUIRED
  ];

  // User-provided free-form text description.
  optional string comment = 2 [(google.api.field_behavior) = OPTIONAL];

  // A map of key-value properties attached to the securable.
  //
  // When provided in update request, the specified properties will override the existing properties.
  // To add and remove properties, one would need to perform a read-modify-write.
  optional google.protobuf.Struct properties = 3 [(google.api.field_behavior) = OPTIONAL];

  // Name of schema.
  string new_name = 4 [
    (buf.validate.field).string.pattern = "^[a-z][0-9a-z._]*[0-9a-z]$",
    (google.api.field_behavior) = OPTIONAL
  ];
}

// Delete a Schema
message DeleteSchemaRequest {
  // Full name of schema to delete.
  //
  // Format: catalog_name.schema_name
  string full_name = 1 [(google.api.field_behavior) = REQUIRED];

  // Force deletion even if the schema is not empty.
  optional bool force = 2 [(google.api.field_behavior) = OPTIONAL];
}

// A schema (also called a database) is the second layer of Unity Catalogâ€™s three-level namespace.
// A schema organizes tables, views and functions. To access (or list) a table or view in a schema,
// users must have the USE_SCHEMA data permission on the schema and its parent catalog, and they must
// have the SELECT permission on the table or view.
service SchemasService {
  // Gets an array of schemas for a catalog in the metastore. If the caller is the metastore
  // admin or the owner of the parent catalog, all schemas for the catalog will be retrieved.
  // Otherwise, only schemas owned by the caller (or for which the caller has the USE_SCHEMA privilege)
  // will be retrieved. There is no guarantee of a specific ordering of the elements in the array.
  rpc ListSchemas(ListSchemasRequest) returns (ListSchemasResponse) {
    option (google.api.http) = {get: "/schemas"};
    option (openapi.v3.operation) = {operation_id: "ListSchemas"};
  }

  // Creates a new schema for catalog in the Metatastore. The caller must be a metastore admin,
  // or have the CREATE_SCHEMA privilege in the parent catalog.
  rpc CreateSchema(CreateSchemaRequest) returns (SchemaInfo) {
    option (google.api.http) = {
      post: "/schemas"
      body: "*"
    };
    option (openapi.v3.operation) = {operation_id: "CreateSchema"};
  }

  // Gets the specified schema within the metastore.
  // The caller must be a metastore admin, the owner of the schema,
  // or a user that has the USE_SCHEMA privilege on the schema.
  rpc GetSchema(GetSchemaRequest) returns (SchemaInfo) {
    option (google.api.http) = {get: "/schemas/{name}"};
    option (openapi.v3.operation) = {operation_id: "GetSchema"};
  }

  // Updates a schema for a catalog. The caller must be the owner of the schema or a metastore admin.
  // If the caller is a metastore admin, only the owner field can be changed in the update.
  // If the name field must be updated, the caller must be a metastore admin or have the CREATE_SCHEMA
  // privilege on the parent catalog.
  rpc UpdateSchema(UpdateSchemaRequest) returns (SchemaInfo) {
    option (google.api.http) = {
      patch: "/schemas/{full_name}"
      body: "*"
    };
    option (openapi.v3.operation) = {operation_id: "UpdateSchema"};
  }

  // Deletes the specified schema from the parent catalog. The caller must be the owner
  // of the schema or an owner of the parent catalog.
  rpc DeleteSchema(DeleteSchemaRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/schemas/{name}"};
    option (openapi.v3.operation) = {operation_id: "DeleteSchema"};
  }
}

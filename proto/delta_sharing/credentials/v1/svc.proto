syntax = "proto3";

package delta_sharing.credentials.v1;

import "buf/validate/validate.proto";
import "delta_sharing/credentials/v1/models.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "openapiv3/annotations.proto";

// Create a new credential
message CreateCredentialRequest {
  // Credential to create.
  Credential credential = 1 [(google.api.field_behavior) = REQUIRED];
}

// Delete a credential
message DeleteCredentialRequest {
  // Name of credential.
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

// Get a credential
message GetCredentialRequest {
  // Name of credential.
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

// Create a new storage location
message CreateStorageLocationRequest {
  // Storage location to create.
  string name = 2 [(google.api.field_behavior) = REQUIRED];

  string url = 3 [(google.api.field_behavior) = REQUIRED];

  StorageType type = 4 [(google.api.field_behavior) = REQUIRED];

  string credential = 5 [(google.api.field_behavior) = REQUIRED];

  optional string description = 6 [(google.api.field_behavior) = OPTIONAL];

  optional google.protobuf.Struct properties = 7 [(google.api.field_behavior) = OPTIONAL];
}

// Delete a storage location
message DeleteStorageLocationRequest {
  // Name of storage location.
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

// Get a storage location
message GetStorageLocationRequest {
  // Name of storage location.
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

// List storage locations
message ListStorageLocationsRequest {
  // The maximum number of results per page that should be returned.
  optional int32 max_results = 2 [
    (buf.validate.field).int32.gt = 0,
    (google.api.field_behavior) = OPTIONAL
  ];

  // Specifies a page token to use. Set pageToken to the nextPageToken returned
  // by a previous list request to get the next page of results.
  optional string page_token = 3 [(google.api.field_behavior) = OPTIONAL];
}

// List storage locations response.
message ListStorageLocationsResponse {
  // The storage locations returned.
  repeated StorageLocation storage_locations = 1;

  // The next_page_token value to include in the next List request.
  optional string next_page_token = 2;
}

// Manage credentials to access external data sources and services
// as well as generate signed urls for the Delta Sharing service.
service CredentialService {
  rpc CreateCredential(CreateCredentialRequest) returns (Credential) {
    option (google.api.http) = {
      post: "/credentials"
      body: "*"
    };
    option (openapi.v3.operation) = {
      tags: [
        "credentials",
        "unofficial"
      ]
      operation_id: "CreateCredential"
    };
  }

  rpc GetCredential(GetCredentialRequest) returns (Credential) {
    option (google.api.http) = {get: "/credentials/{name}"};
    option (openapi.v3.operation) = {
      tags: [
        "credentials",
        "unofficial"
      ]
      operation_id: "GetCredential"
    };
  }

  rpc DeleteCredential(DeleteCredentialRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/credentials/{name}"};
    option (openapi.v3.operation) = {
      tags: [
        "credentials",
        "unofficial"
      ]
      operation_id: "DeleteCredential"
    };
  }

  rpc CreateStorageLocation(CreateStorageLocationRequest) returns (StorageLocation) {
    option (google.api.http) = {
      post: "/locations"
      body: "*"
    };
    option (openapi.v3.operation) = {
      tags: [
        "locations",
        "unofficial"
      ]
      operation_id: "CreateStorageLocation"
    };
  }

  rpc GetStorageLocation(GetStorageLocationRequest) returns (StorageLocation) {
    option (google.api.http) = {get: "/locations/{name}"};
    option (openapi.v3.operation) = {
      tags: [
        "locations",
        "unofficial"
      ]
      operation_id: "GetStorageLocation"
    };
  }

  rpc DeleteStorageLocation(DeleteStorageLocationRequest) returns (StorageLocation) {
    option (google.api.http) = {delete: "/locations/{name}"};
    option (openapi.v3.operation) = {
      tags: [
        "locations",
        "unofficial"
      ]
      operation_id: "DeleteStorageLocation"
    };
  }

  rpc ListStorageLocations(ListStorageLocationsRequest) returns (ListStorageLocationsResponse) {
    option (google.api.http) = {get: "/locations"};
    option (openapi.v3.operation) = {
      tags: [
        "locations",
        "unofficial"
      ]
      operation_id: "ListStorageLocations"
    };
  }
}

syntax = "proto3";

package delta_sharing.credentials.v1;

import "buf/validate/validate.proto";
import "delta_sharing/credentials/v1/models.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/struct.proto";
import "openapiv3/annotations.proto";

// Manage credentials to access external data sources and services
// as well as generate signed urls for the Delta Sharing service.
service CredentialService {
  rpc CreateCredential(CreateCredentialRequest) returns (Credential) {
    option (google.api.http) = {
      post: "/credentials"
      body: "credential"
    };
    option (openapi.v3.operation) = {
      tags: [
        "credentials",
        "unofficial"
      ]
      operation_id: "CreateCredential"
    };
  }

  rpc GetCredential(GetCredentialRequest) returns (Credential) {
    option (google.api.http) = {get: "/credentials/{name}"};
    option (openapi.v3.operation) = {
      tags: [
        "credentials",
        "unofficial"
      ]
      operation_id: "GetCredential"
    };
  }

  rpc DeleteCredential(DeleteCredentialRequest) returns (Credential) {
    option (google.api.http) = {delete: "/credentials/{name}"};
    option (openapi.v3.operation) = {
      tags: [
        "credentials",
        "unofficial"
      ]
      operation_id: "DeleteCredential"
    };
  }

  rpc CreateStorageLocation(CreateStorageLocationRequest) returns (StorageLocation) {
    option (google.api.http) = {
      post: "/locations"
      body: "location"
    };
    option (openapi.v3.operation) = {
      tags: [
        "locations",
        "unofficial"
      ]
      operation_id: "CreateStorageLocation"
    };
  }

  rpc GetStorageLocation(GetStorageLocationRequest) returns (StorageLocation) {
    option (google.api.http) = {get: "/locations/{name}"};
    option (openapi.v3.operation) = {
      tags: [
        "locations",
        "unofficial"
      ]
      operation_id: "GetStorageLocation"
    };
  }

  rpc DeleteStorageLocation(DeleteStorageLocationRequest) returns (StorageLocation) {
    option (google.api.http) = {delete: "/locations/{name}"};
    option (openapi.v3.operation) = {
      tags: [
        "locations",
        "unofficial"
      ]
      operation_id: "DeleteStorageLocation"
    };
  }

  rpc ListStorageLocations(ListStorageLocationsRequest) returns (ListStorageLocationsResponse) {
    option (google.api.http) = {get: "/locations"};
    option (openapi.v3.operation) = {
      tags: [
        "locations",
        "unofficial"
      ]
      operation_id: "ListStorageLocations"
    };
  }
}

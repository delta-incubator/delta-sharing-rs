syntax = "proto3";

package delta_sharing.credentials.v1;

import "buf/validate/validate.proto";
import "delta_sharing/credentials/v1/models.proto";
import "gnostic/openapi/v3/annotations.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

message ListCredentialsRequest {
  // The maximum number of results per page that should be returned.
  optional int32 max_results = 2 [
    (buf.validate.field).int32.gt = 0,
    (buf.validate.field).int32.lt = 1000,
    (google.api.field_behavior) = OPTIONAL
  ];

  // Opaque pagination token to go to next page based on previous query.
  optional string page_token = 3 [(google.api.field_behavior) = OPTIONAL];

  // Return only credentials for the specified purpose.
  optional Purpose purpose = 4 [(google.api.field_behavior) = OPTIONAL];
}

message ListCredentialsResponse {
  // The credentials returned.
  repeated CredentialInfo credentials = 1;

  // The next_page_token value to include in the next List request.
  optional string next_page_token = 2;
}

// Create a new credential
message CreateCredentialRequest {
  // The credential name. The name must be unique among storage and service credentials within the metastore.
  string name = 1 [
    (buf.validate.field).string.pattern = "^[a-z][0-9a-z._]*[0-9a-z]$",
    (google.api.field_behavior) = REQUIRED
  ];

  // The credential purpose.
  Purpose purpose = 2 [(google.api.field_behavior) = REQUIRED];

  // Comment associated with the credential.
  optional string comment = 3 [(google.api.field_behavior) = OPTIONAL];

  // Whether the credential is usable only for read operations. Only applicable when purpose is STORAGE.
  optional bool read_only = 4 [(google.api.field_behavior) = OPTIONAL];

  // Supplying true to this argument skips validation of the created set of credentials.
  bool skip_validation = 5 [(google.api.field_behavior) = OPTIONAL];

  oneof credential {
    AzureServicePrincipal azure_service_principal = 100;

    AzureManagedIdentity azure_managed_identity = 101;
  }
}

// Get a credential
message GetCredentialRequest {
  // Name of credential.
  string name = 1 [
    (buf.validate.field).string.pattern = "^[a-z][0-9a-z._]*[0-9a-z]$",
    (google.api.field_behavior) = REQUIRED
  ];
}

// Update a credential
message UpdateCredentialRequest {
  // Name of credential.
  string name = 1 [
    (buf.validate.field).string.pattern = "^[a-z][0-9a-z._]*[0-9a-z]$",
    (google.api.field_behavior) = REQUIRED
  ];

  // Name of credential.
  optional string new_name = 2 [
    (buf.validate.field).string.pattern = "^[a-z][0-9a-z._]*[0-9a-z]$",
    (google.api.field_behavior) = OPTIONAL
  ];

  // Comment associated with the credential.
  optional string comment = 3 [(google.api.field_behavior) = OPTIONAL];

  // Whether the credential is usable only for read operations. Only applicable when purpose is STORAGE.
  optional bool read_only = 4 [(google.api.field_behavior) = OPTIONAL];

  // Username of current owner of credential.
  optional string owner = 5 [(google.api.field_behavior) = OPTIONAL];

  // Supply true to this argument to skip validation of the updated credential.
  optional bool skip_validation = 6 [(google.api.field_behavior) = OPTIONAL];

  // Force an update even if there are dependent services (when purpose is SERVICE)
  // or dependent external locations and external tables (when purpose is STORAGE).
  optional bool force = 7 [(google.api.field_behavior) = OPTIONAL];

  oneof credential {
    AzureServicePrincipal azure_service_principal = 100;

    AzureManagedIdentity azure_managed_identity = 101;
  }
}

// Delete a credential
message DeleteCredentialRequest {
  // Name of credential.
  string name = 1 [
    (buf.validate.field).string.pattern = "^[a-z][0-9a-z._]*[0-9a-z]$",
    (google.api.field_behavior) = REQUIRED
  ];
}

// Manage credentials to access external data sources and services
// as well as generate signed urls for the Delta Sharing service.
service CredentialsService {
  rpc ListCredentials(ListCredentialsRequest) returns (ListCredentialsResponse) {
    option (google.api.http) = {get: "/credentials"};
    option (gnostic.openapi.v3.operation) = {operation_id: "ListCredentials"};
  }

  rpc CreateCredential(CreateCredentialRequest) returns (CredentialInfo) {
    option (google.api.http) = {
      post: "/credentials"
      body: "*"
    };
    option (gnostic.openapi.v3.operation) = {operation_id: "CreateCredential"};
  }

  rpc GetCredential(GetCredentialRequest) returns (CredentialInfo) {
    option (google.api.http) = {get: "/credentials/{name}"};
    option (gnostic.openapi.v3.operation) = {operation_id: "GetCredential"};
  }

  rpc UpdateCredential(UpdateCredentialRequest) returns (CredentialInfo) {
    option (google.api.http) = {
      patch: "/credentials/{name}"
      body: "*"
    };
    option (gnostic.openapi.v3.operation) = {operation_id: "UpdateCredential"};
  }

  rpc DeleteCredential(DeleteCredentialRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/credentials/{name}"};
    option (gnostic.openapi.v3.operation) = {operation_id: "DeleteCredential"};
  }
}

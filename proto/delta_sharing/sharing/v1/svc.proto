syntax = "proto3";

package delta_sharing.sharing.v1;

import "buf/validate/validate.proto";
import "delta_sharing/sharing/v1/models.proto";
import "delta_sharing/sharing/v1/query.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "openapiv3/annotations.proto";

option (openapi.v3.document) = {
  info: {
    title: "Delta Sharing API"
    version: "0.0.0"
    description: "An Open Protocol for Secure Data Sharing"
    license: {
      name: "AGPL v3.0"
      url: "https://www.gnu.org/licenses/agpl-3.0.en.html"
    }
  }
  tags: [
    {
      name: "DeltaSharingService"
      description: "An Open Protocol for Secure Data Sharing"
    }
  ]
};

// Request to list shares.
message ListSharesRequest {
  // The maximum number of results per page that should be returned.
  optional int32 max_results = 1 [
    (buf.validate.field).int32.gt = 0,
    (google.api.field_behavior) = OPTIONAL
  ];

  // Specifies a page token to use. Set pageToken to the nextPageToken returned
  // by a previous list request to get the next page of results.
  optional string page_token = 2 [(google.api.field_behavior) = OPTIONAL];
}

// Response for ListSharesRequest.
message ListSharesResponse {
  // The shares that were requested.
  repeated Share items = 1;

  // Token that can be used to retrieve the next page of shares.
  // An empty or missing token means that no more shares are available for retrieval.
  optional string next_page_token = 2;
}

// Get a share by name.
message GetShareRequest {
  // The share name to query. It's case-insensitive.
  string name = 1 [
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.pattern = "^[a-z][0-9a-z-]*[0-9a-z]$",
    (google.api.field_behavior) = REQUIRED
  ];
}

// List schemas in a share.
message ListSharingSchemasRequest {
  // The share name to query. It's case-insensitive.
  string share = 1 [
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.pattern = "^[a-z][0-9a-z-]*[0-9a-z]$",
    (google.api.field_behavior) = REQUIRED
  ];

  // The maximum number of results per page that should be returned.
  optional int32 max_results = 2 [
    (buf.validate.field).int32.gt = 0,
    (buf.validate.field).int32.lt = 1000,
    (google.api.field_behavior) = OPTIONAL
  ];

  // Specifies a page token to use. Set pageToken to the nextPageToken returned
  // by a previous list request to get the next page of results.
  optional string page_token = 3 [(google.api.field_behavior) = OPTIONAL];
}

// Response for ListSharingSchemasRequest.
message ListSharingSchemasResponse {
  // The schemas that were requested.
  repeated SharingSchema items = 1;

  // Token that can be used to retrieve the next page of schemas.
  // An empty or missing token means that no more schemas are available for retrieval.
  optional string next_page_token = 2;
}

// List tables in a schema.
message ListSchemaTablesRequest {
  // The schema name to query. It's case-insensitive.
  string name = 1 [
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.pattern = "^[a-z][0-9a-z-]*[0-9a-z]$",
    (google.api.field_behavior) = REQUIRED
  ];

  // The share name to query. It's case-insensitive.
  string share = 2 [
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.pattern = "^[a-z][0-9a-z-]*[0-9a-z]$",
    (google.api.field_behavior) = REQUIRED
  ];

  // The maximum number of results per page that should be returned.
  optional int32 max_results = 3 [
    (buf.validate.field).int32.gt = 0,
    (google.api.field_behavior) = OPTIONAL
  ];

  // Specifies a page token to use. Set pageToken to the nextPageToken returned
  // by a previous list request to get the next page of results.
  optional string page_token = 4 [(google.api.field_behavior) = OPTIONAL];
}

// Response for ListSchemaTablesRequest.
message ListSchemaTablesResponse {
  // The tables that were requested.
  repeated SharingTable items = 1;
  // Token that can be used to retrieve the next page of tables.
  // An empty or missing token means that no more tables are available for retrieval.
  optional string next_page_token = 2;
}

// List tables in a share.
message ListShareTablesRequest {
  // The share name to query. It's case-insensitive.
  string name = 1 [
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.pattern = "^[a-z][0-9a-z-]*[0-9a-z]$",
    (google.api.field_behavior) = REQUIRED
  ];

  // The maximum number of results per page that should be returned.
  optional int32 max_results = 2 [
    (buf.validate.field).int32.gt = 0,
    (buf.validate.field).int32.lt = 1000,
    (google.api.field_behavior) = OPTIONAL
  ];

  // Specifies a page token to use. Set pageToken to the nextPageToken returned
  // by a previous list request to get the next page of results.
  optional string page_token = 3 [(google.api.field_behavior) = OPTIONAL];
}

// Response for ListShareTablesRequest.
message ListShareTablesResponse {
  // The tables that were requested.
  repeated SharingTable items = 1;

  // Token that can be used to retrieve the next page of tables.
  // An empty or missing token means that no more tables are available for retrieval.
  optional string next_page_token = 2;
}

// Service exposing the official APIs for Delta Sharing.
service DeltaSharingService {
  // List shares accessible to a recipient.
  rpc ListShares(ListSharesRequest) returns (ListSharesResponse) {
    option (google.api.http) = {get: "/shares"};
    option (openapi.v3.operation) = {operation_id: "ListShares"};
  }

  // Get the metadata for a specific share.
  rpc GetShare(GetShareRequest) returns (Share) {
    option (google.api.http) = {get: "/{name=shares/*}"};
    option (openapi.v3.operation) = {operation_id: "GetShare"};
  }

  // List the schemas in a share.
  rpc ListSharingSchemas(ListSharingSchemasRequest) returns (ListSharingSchemasResponse) {
    option (google.api.http) = {get: "/shares/{share}}/schemas"};
    option (openapi.v3.operation) = {operation_id: "ListSharingSchemas"};
  }

  // List the tables in a given share's schema.
  rpc ListSchemaTables(ListSchemaTablesRequest) returns (ListSchemaTablesResponse) {
    option (google.api.http) = {get: "/shares/{share}/schemas/{name}/tables"};
    option (openapi.v3.operation) = {operation_id: "ListSchemaTables"};
  }

  // List all the tables under all schemas in a share.
  rpc ListShareTables(ListShareTablesRequest) returns (ListShareTablesResponse) {
    option (google.api.http) = {get: "/{name=shares/*}/all-tables"};
    option (openapi.v3.operation) = {operation_id: "ListShareTables"};
  }

  // Get the current version for a table within a schema.
  rpc GetTableVersion(GetTableVersionRequest) returns (GetTableVersionResponse) {
    option (google.api.http) = {get: "/shares/{share}/schemas/{schema}/tables/{name}/version"};
    option (openapi.v3.operation) = {operation_id: "GetTableVersion"};
  }

  rpc GetTableMetadata(GetTableMetadataRequest) returns (QueryResponse) {
    option (google.api.http) = {get: "/shares/{share}/schemas/{schema}/tables/{name}/metadata"};
    option (openapi.v3.operation) = {operation_id: "GetTableMetadata"};
  }
}

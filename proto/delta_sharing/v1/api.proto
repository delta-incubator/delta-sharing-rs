syntax = "proto3";

package delta_sharing.v1;

import "delta_sharing/v1/models.proto";
import "delta_sharing/v1/query.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "openapiv3/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (openapi.v3.document) = {
  info: {
    title: "Delta Sharing API"
    version: "0.0.0"
    description: "An Open Protocol for Secure Data Sharing"
    license: {
      name: "AGPL v3.0"
      url: "https://www.gnu.org/licenses/agpl-3.0.en.html"
    }
  }
  tags: [
    {
      name: "shares"
      description: "Share discovery APIs"
    },
    {
      name: "schemas"
      description: "Schema discovery APIs"
    },
    {
      name: "tables"
      description: "Table query and inspection APIs"
    },
    {
      name: "official"
      description: "APIs which are part of published official document"
    },
    {
      name: "proposed"
      description: "APIs which are part proposed and may or may not be part of official"
    }
  ]
};

service DeltaSharingService {
  // List shares accessible to a recipient.
  rpc ListShares(ListSharesRequest) returns (ListSharesResponse) {
    option (google.api.http) = {get: "/shares"};
    option (openapi.v3.operation) = {
      tags: [
        "shares",
        "official"
      ]
      operation_id: "ListShares"
    };
  }

  // Get the metadata for a specific share.
  rpc GetShare(GetShareRequest) returns (Share) {
    option (google.api.http) = {get: "/{name=shares/*}"};
    option (google.api.method_signature) = "name";
    option (openapi.v3.operation) = {
      tags: [
        "shares",
        "official"
      ]
      operation_id: "GetShare"
    };
  }

  // List the schemas in a share.
  rpc ListSchemas(ListSchemasRequest) returns (ListSchemasResponse) {
    option (google.api.http) = {get: "/{parent=shares/*}/schemas"};
    option (google.api.method_signature) = "parent";
    option (openapi.v3.operation) = {
      tags: [
        "shares",
        "official"
      ]
      operation_id: "ListSchemas"
    };
  }

  // List the tables in a given share's schema.
  rpc ListSchemaTables(ListSchemaTablesRequest) returns (ListSchemaTablesResponse) {
    option (google.api.http) = {get: "/shares/{share}/schemas/{parent}/tables"};
    option (google.api.method_signature) = "share,schema";
    option (openapi.v3.operation) = {
      tags: [
        "shares",
        "official"
      ]
      operation_id: "ListSchemaTables"
    };
  }

  // List all the tables under all schemas in a share.
  rpc ListShareTables(ListShareTablesRequest) returns (ListShareTablesResponse) {
    option (google.api.http) = {get: "/{parent=shares/*}/all-tables"};
    option (google.api.method_signature) = "parent";
    option (openapi.v3.operation) = {
      tags: [
        "shares",
        "official"
      ]
      operation_id: "ListShareTables"
    };
  }

  // Get the current version for a table within a schema.
  rpc GetTableVersion(GetTableVersionRequest) returns (GetTableVersionResponse) {
    option (google.api.http) = {get: "/shares/{share}/schemas/{schema}/tables/{name}/version"};
    option (google.api.method_signature) = "name,share,schema";
    option (openapi.v3.operation) = {
      tags: [
        "tables",
        "official"
      ]
      operation_id: "GetTableVersion"
    };
  }

  rpc GetTableMetadata(GetTableMetadataRequest) returns (QueryResponse) {
    option (google.api.http) = {get: "/shares/{share}/schemas/{schema}/tables/{name}/metadata"};
    option (google.api.method_signature) = "name,share,schema";
    option (openapi.v3.operation) = {
      tags: [
        "tables",
        "official"
      ]
      operation_id: "GetTableMetadata"
    };
  }
}

syntax = "proto3";

package delta_sharing.v1;

import "buf/validate/validate.proto";

// A share is a logical grouping to share with recipients. A share can be shared with one or multiple recipients.
// A recipient can access all resources in a share. A share may contain multiple schemas.
message Share {
  // Unique identifier for the share.
  optional string id = 1;
  // Name of the share.
  string name = 2;
}

// A schema is a logical grouping of tables. A schema may contain multiple tables.
message Schema {
  // The name of the schama
  string name = 1;
  // The share name that the schema belongs to.
  string share = 2;
}

// A table is a Delta Lake table or a view on top of a Delta Lake table.
message Table {
  // Unique identifier for the table.
  optional string id = 1;
  // The name of the table.
  string name = 2;
  // The schema name that the table belongs to.
  string schema = 3;
  // The share name that the table belongs to.
  string share = 4;
  // A unique identifier for the share this table belongs to.
  optional string share_id = 5;
}

message ListSharesRequest {
  // The maximum number of results per page that should be returned.
  // If the number of available results is larger than maxResults, the response
  // will provide a next_page_token that can be used to get the next page of results
  // in subsequent list requests. The server may return fewer than maxResults
  // items even if there are more available. The client should check nextPageToken
  // in the response to determine if there are more available.
  // Must be non-negative. 0 will return no results but nextPageToken may be populated.
  optional int32 max_results = 1 [(buf.validate.field).int32.gte = 0];

  // Specifies a page token to use. Set pageToken to the nextPageToken returned
  // by a previous list request to get the next page of results.
  // next_page_token will not be returned in a response if there are no more results available.
  optional string page_token = 2;
}

message ListSharesResponse {
  // The shares that were requested.
  repeated Share items = 1;
  // Token that can be used to retrieve the next page of shares.
  // An empty or missing token means that no more shares are available for retrieval.
  optional string next_page_token = 2;
}

message GetShareRequest {
  // The share name to query. It's case-insensitive.
  string share = 1;
}

message GetShareResponse {
  // The share that was requested.
  Share share = 1;
}

message ListSchemasRequest {
  // The maximum number of results per page that should be returned.
  // If the number of available results is larger than maxResults, the response
  // will provide a next_page_token that can be used to get the next page of results
  // in subsequent list requests. The server may return fewer than maxResults
  // items even if there are more available. The client should check nextPageToken
  // in the response to determine if there are more available.
  // Must be non-negative. 0 will return no results but nextPageToken may be populated.
  optional int32 max_results = 1 [(buf.validate.field).int32.gte = 0];

  // Specifies a page token to use. Set pageToken to the nextPageToken returned
  // by a previous list request to get the next page of results.
  // next_page_token will not be returned in a response if there are no more results available.
  optional string page_token = 2;

  // The share name to query. It's case-insensitive.
  string share = 3 [(buf.validate.field).string.min_len = 1];
}

message ListSchemasResponse {
  // The schemas that were requested.
  repeated Schema items = 1;
  // Token that can be used to retrieve the next page of schemas.
  // An empty or missing token means that no more schemas are available for retrieval.
  optional string next_page_token = 2;
}

message ListSchemaTablesRequest {
  // The maximum number of results per page that should be returned.
  // If the number of available results is larger than maxResults, the response
  // will provide a next_page_token that can be used to get the next page of results
  // in subsequent list requests. The server may return fewer than maxResults
  // items even if there are more available. The client should check nextPageToken
  // in the response to determine if there are more available.
  // Must be non-negative. 0 will return no results but nextPageToken may be populated.
  optional int32 max_results = 1 [(buf.validate.field).int32.gte = 0];

  // Specifies a page token to use. Set pageToken to the nextPageToken returned
  // by a previous list request to get the next page of results.
  // next_page_token will not be returned in a response if there are no more results available.
  optional string page_token = 2;

  // The share name to query. It's case-insensitive.
  string share = 3 [(buf.validate.field).string.min_len = 1];

  // The schema name to query. It's case-insensitive.
  string schema = 4 [(buf.validate.field).string.min_len = 1];
}

message ListSchemaTablesResponse {
  // The tables that were requested.
  repeated Table items = 1;
  // Token that can be used to retrieve the next page of tables.
  // An empty or missing token means that no more tables are available for retrieval.
  optional string next_page_token = 2;
}

message ListShareTablesRequest {
  // The maximum number of results per page that should be returned.
  // If the number of available results is larger than maxResults, the response
  // will provide a next_page_token that can be used to get the next page of results
  // in subsequent list requests. The server may return fewer than maxResults
  // items even if there are more available. The client should check nextPageToken
  // in the response to determine if there are more available.
  // Must be non-negative. 0 will return no results but nextPageToken may be populated.
  optional int32 max_results = 1 [(buf.validate.field).int32.gte = 0];

  // Specifies a page token to use. Set pageToken to the nextPageToken returned
  // by a previous list request to get the next page of results.
  // next_page_token will not be returned in a response if there are no more results available.
  optional string page_token = 2;

  // The share name to query. It's case-insensitive.
  string share = 3 [(buf.validate.field).string.min_len = 1];
}

message ListShareTablesResponse {
  // The tables that were requested.
  repeated Table items = 1;
  // Token that can be used to retrieve the next page of tables.
  // An empty or missing token means that no more tables are available for retrieval.
  optional string next_page_token = 2;
}

message GetTableVersionRequest {
  // The share name to query. It's case-insensitive.
  string share = 1 [(buf.validate.field).string.min_len = 1];

  // The schema name to query. It's case-insensitive.
  string schema = 2 [(buf.validate.field).string.min_len = 1];

  // The table name to query. It's case-insensitive.
  string table = 3 [(buf.validate.field).string.min_len = 1];

  // The startingTimestamp of the query, a string in the  ISO8601 format, in the UTC timezone,
  // such as 2022-01-01T00:00:00Z. the server needs to return the earliest table version at
  // or after the provided timestamp, can be earlier than the timestamp of table version 0.
  optional string starting_timestamp = 4;
}

message GetTableVersionResponse {
  // The table version that was requested.
  int64 version = 1;
}

message GetTableMetadataRequest {
  // The share name to query. It's case-insensitive.
  string share = 1 [(buf.validate.field).string.min_len = 1];

  // The schema name to query. It's case-insensitive.
  string schema = 2 [(buf.validate.field).string.min_len = 1];

  // The table name to query. It's case-insensitive.
  string table = 3 [(buf.validate.field).string.min_len = 1];

  // The response format that the client supports. The server will try to honor the client
  // but may fallback to Parquet format.
  repeated string response_format = 4;

  // The reader features that the client supports. If the table has features that the client
  // does not support, the server will return an error.
  repeated string reader_features = 5;
}

message GetTableMetadataResponse {
  uint64 version = 1;
  oneof response {
    ParquetWrappedResponse parquet = 2;
    DeltaWrappedResponse delta = 3;
  }
}

message ParquetWrappedResponse {
  repeated ParquetWrappedAction actions = 1;
}

message ParquetWrappedAction {
  oneof action {
    ParquetWrappedProtocol parquet_protocol = 1;
    ParquetWrappedMetadata parquet_metadata = 2;
  }
}

message ParquetWrappedProtocol {
  int32 minReaderVersion = 1;
}

message ParquetWrappedMetadata {
  string id = 1;
  optional string name = 2;
  optional string description = 3;
  optional ParquetFormat format = 4;
  string schemaString = 5;
  repeated string partitionColumns = 6;
  map<string, string> configuration = 7;
  optional uint64 version = 8;
  optional uint64 size = 9;
  optional uint64 numFiles = 10;
}

message ParquetFormat {
  string provider = 1;
}

message DeltaWrappedResponse {
  repeated DeltaWrappedAction actions = 1;
}

message DeltaWrappedAction {
  oneof action {
    DeltaWrappedProtocol delta_protocol = 1;
    DeltaWrappedMetadata delta_metadata = 2;
  }
}

message DeltaWrappedProtocol {
  DeltaProtocol deltaProtocol = 1;
}

message DeltaProtocol {
  int32 minReaderVersion = 1;
  int32 minWriterVersion = 2;
  repeated string readerFeatures = 3;
  repeated string writerFeatures = 4;
}

message DeltaWrappedMetadata {
  DeltaMetadata deltaMetadata = 1;
  optional uint64 version = 2;
  optional uint64 size = 3;
  optional uint64 numFiles = 4;
}

message DeltaMetadata {
  string id = 1;
  optional string name = 2;
  optional string description = 3;
  DeltaFormat format = 4;
  string schemaString = 5;
  repeated string partitionColumns = 6;
  optional int64 createdTime = 7;
  map<string, string> configuration = 8;
}

message DeltaFormat {
  string provider = 1;
  map<string, string> options = 2;
}

message Profile {
  // The file format version of the profile file. This version will be increased whenever
  // non-forward-compatible changes are made to the profile format. When a client is running
  // an unsupported profile file format version, it should show an error message instructing
  // the user to upgrade to a newer version of their client.
  int32 share_credentials_version = 1;

  // The url of the sharing server.
  string endpoint = 2;

  // The bearer token to access the server.
  string bearer_token = 3;

  // The expiration time of the bearer token in ISO 8601 format. This field is optional
  // and if it is not provided, the bearer token can be seen as never expire.
  string expiration_time = 4;
}

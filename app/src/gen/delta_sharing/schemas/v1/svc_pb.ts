// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true"
// @generated from file delta_sharing/schemas/v1/svc.proto (package delta_sharing.schemas.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_buf_validate_validate } from "../../../buf/validate/validate_pb";
import type { SchemaInfo, SchemaInfoJson, SchemaInfoSchema } from "./models_pb";
import { file_delta_sharing_schemas_v1_models } from "./models_pb";
import { file_gnostic_openapi_v3_annotations } from "../../../gnostic/openapi/v3/annotations_pb";
import { file_google_api_annotations } from "../../../google/api/annotations_pb";
import { file_google_api_client } from "../../../google/api/client_pb";
import { file_google_api_field_behavior } from "../../../google/api/field_behavior_pb";
import { file_google_api_resource } from "../../../google/api/resource_pb";
import type { EmptySchema, StructJson } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_struct } from "@bufbuild/protobuf/wkt";
import type { JsonObject, Message } from "@bufbuild/protobuf";

/**
 * Describes the file delta_sharing/schemas/v1/svc.proto.
 */
export const file_delta_sharing_schemas_v1_svc: GenFile = /*@__PURE__*/
  fileDesc("CiJkZWx0YV9zaGFyaW5nL3NjaGVtYXMvdjEvc3ZjLnByb3RvEhhkZWx0YV9zaGFyaW5nLnNjaGVtYXMudjEi6gEKEkxpc3RTY2hlbWFzUmVxdWVzdBI5CgxjYXRhbG9nX25hbWUYASABKAlCI+BBArpIHXIbMhleW2Etel1bMC05YS16X10qWzAtOWEtel0kEicKC21heF9yZXN1bHRzGAIgASgFQg3gQQG6SAcaBRDoByAASACIAQESHAoKcGFnZV90b2tlbhgDIAEoCUID4EEBSAGIAQESIAoOaW5jbHVkZV9icm93c2UYBCABKAhCA+BBAUgCiAEBQg4KDF9tYXhfcmVzdWx0c0INCgtfcGFnZV90b2tlbkIRCg9faW5jbHVkZV9icm93c2UifgoTTGlzdFNjaGVtYXNSZXNwb25zZRI1CgdzY2hlbWFzGAEgAygLMiQuZGVsdGFfc2hhcmluZy5zY2hlbWFzLnYxLlNjaGVtYUluZm8SHAoPbmV4dF9wYWdlX3Rva2VuGAIgASgJSACIAQFCEgoQX25leHRfcGFnZV90b2tlbiKwAQoTQ3JlYXRlU2NoZW1hUmVxdWVzdBIRCgRuYW1lGAEgASgJQgPgQQISGQoMY2F0YWxvZ19uYW1lGAIgASgJQgPgQQISGQoHY29tbWVudBgDIAEoCUID4EEBSACIAQESNQoKcHJvcGVydGllcxgEIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCA+BBAUgBiAEBQgoKCF9jb21tZW50Qg0KC19wcm9wZXJ0aWVzIksKEEdldFNjaGVtYVJlcXVlc3QSNwoJZnVsbF9uYW1lGAEgASgJQiTgQQK6SB5yHDIaXlthLXpdWzAtOWEtei5fXSpbMC05YS16XSQi8wEKE1VwZGF0ZVNjaGVtYVJlcXVlc3QSNwoJZnVsbF9uYW1lGAEgASgJQiTgQQK6SB5yHDIaXlthLXpdWzAtOWEtei5fXSpbMC05YS16XSQSGQoHY29tbWVudBgCIAEoCUID4EEBSACIAQESNQoKcHJvcGVydGllcxgDIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCA+BBAUgBiAEBEjYKCG5ld19uYW1lGAQgASgJQiTgQQG6SB5yHDIaXlthLXpdWzAtOWEtei5fXSpbMC05YS16XSRCCgoIX2NvbW1lbnRCDQoLX3Byb3BlcnRpZXMiUAoTRGVsZXRlU2NoZW1hUmVxdWVzdBIWCglmdWxsX25hbWUYASABKAlCA+BBAhIXCgVmb3JjZRgCIAEoCEID4EEBSACIAQFCCAoGX2ZvcmNlMssFCg5TY2hlbWFzU2VydmljZRKMAQoLTGlzdFNjaGVtYXMSLC5kZWx0YV9zaGFyaW5nLnNjaGVtYXMudjEuTGlzdFNjaGVtYXNSZXF1ZXN0Gi0uZGVsdGFfc2hhcmluZy5zY2hlbWFzLnYxLkxpc3RTY2hlbWFzUmVzcG9uc2UiILpHDSoLTGlzdFNjaGVtYXOC0+STAgoSCC9zY2hlbWFzEokBCgxDcmVhdGVTY2hlbWESLS5kZWx0YV9zaGFyaW5nLnNjaGVtYXMudjEuQ3JlYXRlU2NoZW1hUmVxdWVzdBokLmRlbHRhX3NoYXJpbmcuc2NoZW1hcy52MS5TY2hlbWFJbmZvIiS6Rw4qDENyZWF0ZVNjaGVtYYLT5JMCDToBKiIIL3NjaGVtYXMShAEKCUdldFNjaGVtYRIqLmRlbHRhX3NoYXJpbmcuc2NoZW1hcy52MS5HZXRTY2hlbWFSZXF1ZXN0GiQuZGVsdGFfc2hhcmluZy5zY2hlbWFzLnYxLlNjaGVtYUluZm8iJbpHCyoJR2V0U2NoZW1hgtPkkwIREg8vc2NoZW1hcy97bmFtZX0SlQEKDFVwZGF0ZVNjaGVtYRItLmRlbHRhX3NoYXJpbmcuc2NoZW1hcy52MS5VcGRhdGVTY2hlbWFSZXF1ZXN0GiQuZGVsdGFfc2hhcmluZy5zY2hlbWFzLnYxLlNjaGVtYUluZm8iMLpHDioMVXBkYXRlU2NoZW1hgtPkkwIZOgEqMhQvc2NoZW1hcy97ZnVsbF9uYW1lfRJ/CgxEZWxldGVTY2hlbWESLS5kZWx0YV9zaGFyaW5nLnNjaGVtYXMudjEuRGVsZXRlU2NoZW1hUmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIoukcOKgxEZWxldGVTY2hlbWGC0+STAhEqDy9zY2hlbWFzL3tuYW1lfUL5AQocY29tLmRlbHRhX3NoYXJpbmcuc2NoZW1hcy52MUIIU3ZjUHJvdG9QAVpRZ2l0aHViLmNvbS9kZWx0YS1pbmN1YmF0b3IvZGVsdGEtc2hhcmluZy1ycy9nby9kZWx0YV9zaGFyaW5nL3NjaGVtYXMvdjE7c2NoZW1hc3YxogIDRFNYqgIXRGVsdGFTaGFyaW5nLlNjaGVtYXMuVjHKAhdEZWx0YVNoYXJpbmdcU2NoZW1hc1xWMeICI0RlbHRhU2hhcmluZ1xTY2hlbWFzXFYxXEdQQk1ldGFkYXRh6gIZRGVsdGFTaGFyaW5nOjpTY2hlbWFzOjpWMWIGcHJvdG8z", [file_buf_validate_validate, file_delta_sharing_schemas_v1_models, file_gnostic_openapi_v3_annotations, file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_empty, file_google_protobuf_struct]);

/**
 * List Schemas in a catalog
 *
 * @generated from message delta_sharing.schemas.v1.ListSchemasRequest
 */
export type ListSchemasRequest = Message<"delta_sharing.schemas.v1.ListSchemasRequest"> & {
  /**
   * Name of parent catalog.
   *
   * @generated from field: string catalog_name = 1;
   */
  catalogName: string;

  /**
   * The maximum number of results per page that should be returned.
   *
   * @generated from field: optional int32 max_results = 2;
   */
  maxResults?: number;

  /**
   * Opaque pagination token to go to next page based on previous query.
   *
   * @generated from field: optional string page_token = 3;
   */
  pageToken?: string;

  /**
   * Whether to include schemas in the response for which the principal can only access selective metadata for
   *
   * @generated from field: optional bool include_browse = 4;
   */
  includeBrowse?: boolean;
};

/**
 * List Schemas in a catalog
 *
 * @generated from message delta_sharing.schemas.v1.ListSchemasRequest
 */
export type ListSchemasRequestJson = {
  /**
   * Name of parent catalog.
   *
   * @generated from field: string catalog_name = 1;
   */
  catalogName?: string;

  /**
   * The maximum number of results per page that should be returned.
   *
   * @generated from field: optional int32 max_results = 2;
   */
  maxResults?: number;

  /**
   * Opaque pagination token to go to next page based on previous query.
   *
   * @generated from field: optional string page_token = 3;
   */
  pageToken?: string;

  /**
   * Whether to include schemas in the response for which the principal can only access selective metadata for
   *
   * @generated from field: optional bool include_browse = 4;
   */
  includeBrowse?: boolean;
};

/**
 * Describes the message delta_sharing.schemas.v1.ListSchemasRequest.
 * Use `create(ListSchemasRequestSchema)` to create a new message.
 */
export const ListSchemasRequestSchema: GenMessage<ListSchemasRequest, ListSchemasRequestJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_schemas_v1_svc, 0);

/**
 * List Schemas response.
 *
 * @generated from message delta_sharing.schemas.v1.ListSchemasResponse
 */
export type ListSchemasResponse = Message<"delta_sharing.schemas.v1.ListSchemasResponse"> & {
  /**
   * The schemas returned.
   *
   * @generated from field: repeated delta_sharing.schemas.v1.SchemaInfo schemas = 1;
   */
  schemas: SchemaInfo[];

  /**
   * The next_page_token value to include in the next List request.
   *
   * @generated from field: optional string next_page_token = 2;
   */
  nextPageToken?: string;
};

/**
 * List Schemas response.
 *
 * @generated from message delta_sharing.schemas.v1.ListSchemasResponse
 */
export type ListSchemasResponseJson = {
  /**
   * The schemas returned.
   *
   * @generated from field: repeated delta_sharing.schemas.v1.SchemaInfo schemas = 1;
   */
  schemas?: SchemaInfoJson[];

  /**
   * The next_page_token value to include in the next List request.
   *
   * @generated from field: optional string next_page_token = 2;
   */
  nextPageToken?: string;
};

/**
 * Describes the message delta_sharing.schemas.v1.ListSchemasResponse.
 * Use `create(ListSchemasResponseSchema)` to create a new message.
 */
export const ListSchemasResponseSchema: GenMessage<ListSchemasResponse, ListSchemasResponseJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_schemas_v1_svc, 1);

/**
 * Create a new Schema
 *
 * @generated from message delta_sharing.schemas.v1.CreateSchemaRequest
 */
export type CreateSchemaRequest = Message<"delta_sharing.schemas.v1.CreateSchemaRequest"> & {
  /**
   * Name of schema, relative to parent catalog.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Name of parent catalog.
   *
   * @generated from field: string catalog_name = 2;
   */
  catalogName: string;

  /**
   * User-provided free-form text description.
   *
   * @generated from field: optional string comment = 3;
   */
  comment?: string;

  /**
   * A map of key-value properties attached to the securable.
   *
   * @generated from field: optional google.protobuf.Struct properties = 4;
   */
  properties?: JsonObject;
};

/**
 * Create a new Schema
 *
 * @generated from message delta_sharing.schemas.v1.CreateSchemaRequest
 */
export type CreateSchemaRequestJson = {
  /**
   * Name of schema, relative to parent catalog.
   *
   * @generated from field: string name = 1;
   */
  name?: string;

  /**
   * Name of parent catalog.
   *
   * @generated from field: string catalog_name = 2;
   */
  catalogName?: string;

  /**
   * User-provided free-form text description.
   *
   * @generated from field: optional string comment = 3;
   */
  comment?: string;

  /**
   * A map of key-value properties attached to the securable.
   *
   * @generated from field: optional google.protobuf.Struct properties = 4;
   */
  properties?: StructJson;
};

/**
 * Describes the message delta_sharing.schemas.v1.CreateSchemaRequest.
 * Use `create(CreateSchemaRequestSchema)` to create a new message.
 */
export const CreateSchemaRequestSchema: GenMessage<CreateSchemaRequest, CreateSchemaRequestJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_schemas_v1_svc, 2);

/**
 * Get a Schema
 *
 * @generated from message delta_sharing.schemas.v1.GetSchemaRequest
 */
export type GetSchemaRequest = Message<"delta_sharing.schemas.v1.GetSchemaRequest"> & {
  /**
   * Full name of schema.
   *
   * Format: catalog_name.schema_name
   *
   * @generated from field: string full_name = 1;
   */
  fullName: string;
};

/**
 * Get a Schema
 *
 * @generated from message delta_sharing.schemas.v1.GetSchemaRequest
 */
export type GetSchemaRequestJson = {
  /**
   * Full name of schema.
   *
   * Format: catalog_name.schema_name
   *
   * @generated from field: string full_name = 1;
   */
  fullName?: string;
};

/**
 * Describes the message delta_sharing.schemas.v1.GetSchemaRequest.
 * Use `create(GetSchemaRequestSchema)` to create a new message.
 */
export const GetSchemaRequestSchema: GenMessage<GetSchemaRequest, GetSchemaRequestJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_schemas_v1_svc, 3);

/**
 * Update a Schema
 *
 * @generated from message delta_sharing.schemas.v1.UpdateSchemaRequest
 */
export type UpdateSchemaRequest = Message<"delta_sharing.schemas.v1.UpdateSchemaRequest"> & {
  /**
   * Full name of schema, in form of catalog_name.schema_name.
   *
   * @generated from field: string full_name = 1;
   */
  fullName: string;

  /**
   * User-provided free-form text description.
   *
   * @generated from field: optional string comment = 2;
   */
  comment?: string;

  /**
   * A map of key-value properties attached to the securable.
   *
   * When provided in update request, the specified properties will override the existing properties.
   * To add and remove properties, one would need to perform a read-modify-write.
   *
   * @generated from field: optional google.protobuf.Struct properties = 3;
   */
  properties?: JsonObject;

  /**
   * Name of schema.
   *
   * @generated from field: string new_name = 4;
   */
  newName: string;
};

/**
 * Update a Schema
 *
 * @generated from message delta_sharing.schemas.v1.UpdateSchemaRequest
 */
export type UpdateSchemaRequestJson = {
  /**
   * Full name of schema, in form of catalog_name.schema_name.
   *
   * @generated from field: string full_name = 1;
   */
  fullName?: string;

  /**
   * User-provided free-form text description.
   *
   * @generated from field: optional string comment = 2;
   */
  comment?: string;

  /**
   * A map of key-value properties attached to the securable.
   *
   * When provided in update request, the specified properties will override the existing properties.
   * To add and remove properties, one would need to perform a read-modify-write.
   *
   * @generated from field: optional google.protobuf.Struct properties = 3;
   */
  properties?: StructJson;

  /**
   * Name of schema.
   *
   * @generated from field: string new_name = 4;
   */
  newName?: string;
};

/**
 * Describes the message delta_sharing.schemas.v1.UpdateSchemaRequest.
 * Use `create(UpdateSchemaRequestSchema)` to create a new message.
 */
export const UpdateSchemaRequestSchema: GenMessage<UpdateSchemaRequest, UpdateSchemaRequestJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_schemas_v1_svc, 4);

/**
 * Delete a Schema
 *
 * @generated from message delta_sharing.schemas.v1.DeleteSchemaRequest
 */
export type DeleteSchemaRequest = Message<"delta_sharing.schemas.v1.DeleteSchemaRequest"> & {
  /**
   * Full name of schema to delete.
   *
   * Format: catalog_name.schema_name
   *
   * @generated from field: string full_name = 1;
   */
  fullName: string;

  /**
   * Force deletion even if the schema is not empty.
   *
   * @generated from field: optional bool force = 2;
   */
  force?: boolean;
};

/**
 * Delete a Schema
 *
 * @generated from message delta_sharing.schemas.v1.DeleteSchemaRequest
 */
export type DeleteSchemaRequestJson = {
  /**
   * Full name of schema to delete.
   *
   * Format: catalog_name.schema_name
   *
   * @generated from field: string full_name = 1;
   */
  fullName?: string;

  /**
   * Force deletion even if the schema is not empty.
   *
   * @generated from field: optional bool force = 2;
   */
  force?: boolean;
};

/**
 * Describes the message delta_sharing.schemas.v1.DeleteSchemaRequest.
 * Use `create(DeleteSchemaRequestSchema)` to create a new message.
 */
export const DeleteSchemaRequestSchema: GenMessage<DeleteSchemaRequest, DeleteSchemaRequestJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_schemas_v1_svc, 5);

/**
 * A schema (also called a database) is the second layer of Unity Catalog’s three-level namespace.
 * A schema organizes tables, views and functions. To access (or list) a table or view in a schema,
 * users must have the USE_SCHEMA data permission on the schema and its parent catalog, and they must
 * have the SELECT permission on the table or view.
 *
 * @generated from service delta_sharing.schemas.v1.SchemasService
 */
export const SchemasService: GenService<{
  /**
   * Gets an array of schemas for a catalog in the metastore. If the caller is the metastore
   * admin or the owner of the parent catalog, all schemas for the catalog will be retrieved.
   * Otherwise, only schemas owned by the caller (or for which the caller has the USE_SCHEMA privilege)
   * will be retrieved. There is no guarantee of a specific ordering of the elements in the array.
   *
   * @generated from rpc delta_sharing.schemas.v1.SchemasService.ListSchemas
   */
  listSchemas: {
    methodKind: "unary";
    input: typeof ListSchemasRequestSchema;
    output: typeof ListSchemasResponseSchema;
  },
  /**
   * Creates a new schema for catalog in the Metatastore. The caller must be a metastore admin,
   * or have the CREATE_SCHEMA privilege in the parent catalog.
   *
   * @generated from rpc delta_sharing.schemas.v1.SchemasService.CreateSchema
   */
  createSchema: {
    methodKind: "unary";
    input: typeof CreateSchemaRequestSchema;
    output: typeof SchemaInfoSchema;
  },
  /**
   * Gets the specified schema within the metastore.
   * The caller must be a metastore admin, the owner of the schema,
   * or a user that has the USE_SCHEMA privilege on the schema.
   *
   * @generated from rpc delta_sharing.schemas.v1.SchemasService.GetSchema
   */
  getSchema: {
    methodKind: "unary";
    input: typeof GetSchemaRequestSchema;
    output: typeof SchemaInfoSchema;
  },
  /**
   * Updates a schema for a catalog. The caller must be the owner of the schema or a metastore admin.
   * If the caller is a metastore admin, only the owner field can be changed in the update.
   * If the name field must be updated, the caller must be a metastore admin or have the CREATE_SCHEMA
   * privilege on the parent catalog.
   *
   * @generated from rpc delta_sharing.schemas.v1.SchemasService.UpdateSchema
   */
  updateSchema: {
    methodKind: "unary";
    input: typeof UpdateSchemaRequestSchema;
    output: typeof SchemaInfoSchema;
  },
  /**
   * Deletes the specified schema from the parent catalog. The caller must be the owner
   * of the schema or an owner of the parent catalog.
   *
   * @generated from rpc delta_sharing.schemas.v1.SchemasService.DeleteSchema
   */
  deleteSchema: {
    methodKind: "unary";
    input: typeof DeleteSchemaRequestSchema;
    output: typeof EmptySchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_delta_sharing_schemas_v1_svc, 0);


// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true"
// @generated from file delta_sharing/sharing/v1/models.proto (package delta_sharing.sharing.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_buf_validate_validate } from "../../../buf/validate/validate_pb";
import { file_google_api_field_behavior } from "../../../google/api/field_behavior_pb";
import { file_google_api_resource } from "../../../google/api/resource_pb";
import type { StructJson } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_struct } from "@bufbuild/protobuf/wkt";
import type { JsonObject, Message } from "@bufbuild/protobuf";

/**
 * Describes the file delta_sharing/sharing/v1/models.proto.
 */
export const file_delta_sharing_sharing_v1_models: GenFile = /*@__PURE__*/
  fileDesc("CiVkZWx0YV9zaGFyaW5nL3NoYXJpbmcvdjEvbW9kZWxzLnByb3RvEhhkZWx0YV9zaGFyaW5nLnNoYXJpbmcudjEiPgoFU2hhcmUSGAoEbmFtZRgBIAEoCUIK4EEIukgEcgIQARIUCgJpZBgCIAEoCUID4EEDSACIAQFCBQoDX2lkIkkKDVNoYXJpbmdTY2hlbWESDAoEbmFtZRgBIAEoCRINCgVzaGFyZRgCIAEoCRIUCgJpZBgDIAEoCUID4EEDSACIAQFCBQoDX2lkIvsBCgxTaGFyaW5nVGFibGUSNwoEbmFtZRgBIAEoCUIp4EEIukgjciEQARj/ATIaXlthLXpdWzAtOWEtei5fXSpbMC05YS16XSQSNQoGc2NoZW1hGAIgASgJQiW6SCJyIBABGP8BMhleW2Etel1bMC05YS16X10qWzAtOWEtel0kEjUKBXNoYXJlGAMgASgJQia6SCNyIRABGP8BMhpeW2Etel1bMC05YS16Ll9dKlswLTlhLXpdJBIUCgJpZBgEIAEoCUID4EEDSACIAQESGgoIc2hhcmVfaWQYBSABKAlCA+BBA0gBiAEBQgUKA19pZEILCglfc2hhcmVfaWQi8AEKEVNoYXJpbmdTY2hlbWFJbmZvEg8KAmlkGAEgASgJQgPgQQMSGAoEbmFtZRgCIAEoCUIK4EEIukgEcgIQARISCgVzaGFyZRgDIAEoCUID4EEDEhoKCHNoYXJlX2lkGAQgASgJQgPgQQNIAIgBARIdCgtkZXNjcmlwdGlvbhgFIAEoCUID4EEBSAGIAQESNQoKcHJvcGVydGllcxgGIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCA+BBAUgCiAEBQgsKCV9zaGFyZV9pZEIOCgxfZGVzY3JpcHRpb25CDQoLX3Byb3BlcnRpZXNC/AEKHGNvbS5kZWx0YV9zaGFyaW5nLnNoYXJpbmcudjFCC01vZGVsc1Byb3RvUAFaUWdpdGh1Yi5jb20vZGVsdGEtaW5jdWJhdG9yL2RlbHRhLXNoYXJpbmctcnMvZ28vZGVsdGFfc2hhcmluZy9zaGFyaW5nL3YxO3NoYXJpbmd2MaICA0RTWKoCF0RlbHRhU2hhcmluZy5TaGFyaW5nLlYxygIXRGVsdGFTaGFyaW5nXFNoYXJpbmdcVjHiAiNEZWx0YVNoYXJpbmdcU2hhcmluZ1xWMVxHUEJNZXRhZGF0YeoCGURlbHRhU2hhcmluZzo6U2hhcmluZzo6VjFiBnByb3RvMw", [file_buf_validate_validate, file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_struct]);

/**
 * A share is a logical grouping to share with recipients. A share can be shared with one or multiple recipients.
 * A recipient can access all resources in a share. A share may contain multiple schemas.
 *
 * @generated from message delta_sharing.sharing.v1.Share
 */
export type Share = Message<"delta_sharing.sharing.v1.Share"> & {
  /**
   * Name of the share.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Unique identifier for the share.
   *
   * @generated from field: optional string id = 2;
   */
  id?: string;
};

/**
 * A share is a logical grouping to share with recipients. A share can be shared with one or multiple recipients.
 * A recipient can access all resources in a share. A share may contain multiple schemas.
 *
 * @generated from message delta_sharing.sharing.v1.Share
 */
export type ShareJson = {
  /**
   * Name of the share.
   *
   * @generated from field: string name = 1;
   */
  name?: string;

  /**
   * Unique identifier for the share.
   *
   * @generated from field: optional string id = 2;
   */
  id?: string;
};

/**
 * Describes the message delta_sharing.sharing.v1.Share.
 * Use `create(ShareSchema)` to create a new message.
 */
export const ShareSchema: GenMessage<Share, ShareJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_sharing_v1_models, 0);

/**
 * A schema is a logical grouping of tables. A schema may contain multiple tables.
 *
 * @generated from message delta_sharing.sharing.v1.SharingSchema
 */
export type SharingSchema = Message<"delta_sharing.sharing.v1.SharingSchema"> & {
  /**
   * The name of the schema
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The share name that the schema belongs to.
   *
   * @generated from field: string share = 2;
   */
  share: string;

  /**
   * Unique identifier for the schema.
   *
   * @generated from field: optional string id = 3;
   */
  id?: string;
};

/**
 * A schema is a logical grouping of tables. A schema may contain multiple tables.
 *
 * @generated from message delta_sharing.sharing.v1.SharingSchema
 */
export type SharingSchemaJson = {
  /**
   * The name of the schema
   *
   * @generated from field: string name = 1;
   */
  name?: string;

  /**
   * The share name that the schema belongs to.
   *
   * @generated from field: string share = 2;
   */
  share?: string;

  /**
   * Unique identifier for the schema.
   *
   * @generated from field: optional string id = 3;
   */
  id?: string;
};

/**
 * Describes the message delta_sharing.sharing.v1.SharingSchema.
 * Use `create(SharingSchemaSchema)` to create a new message.
 */
export const SharingSchemaSchema: GenMessage<SharingSchema, SharingSchemaJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_sharing_v1_models, 1);

/**
 * A table is a Delta Lake table or a view on top of a Delta Lake table.
 *
 * @generated from message delta_sharing.sharing.v1.SharingTable
 */
export type SharingTable = Message<"delta_sharing.sharing.v1.SharingTable"> & {
  /**
   * The name of the table.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The schema name that the table belongs to.
   *
   * @generated from field: string schema = 2;
   */
  schema: string;

  /**
   * The share name that the table belongs to.
   *
   * @generated from field: string share = 3;
   */
  share: string;

  /**
   * Unique identifier for the table.
   *
   * @generated from field: optional string id = 4;
   */
  id?: string;

  /**
   * A unique identifier for the share this table belongs to.
   *
   * @generated from field: optional string share_id = 5;
   */
  shareId?: string;
};

/**
 * A table is a Delta Lake table or a view on top of a Delta Lake table.
 *
 * @generated from message delta_sharing.sharing.v1.SharingTable
 */
export type SharingTableJson = {
  /**
   * The name of the table.
   *
   * @generated from field: string name = 1;
   */
  name?: string;

  /**
   * The schema name that the table belongs to.
   *
   * @generated from field: string schema = 2;
   */
  schema?: string;

  /**
   * The share name that the table belongs to.
   *
   * @generated from field: string share = 3;
   */
  share?: string;

  /**
   * Unique identifier for the table.
   *
   * @generated from field: optional string id = 4;
   */
  id?: string;

  /**
   * A unique identifier for the share this table belongs to.
   *
   * @generated from field: optional string share_id = 5;
   */
  shareId?: string;
};

/**
 * Describes the message delta_sharing.sharing.v1.SharingTable.
 * Use `create(SharingTableSchema)` to create a new message.
 */
export const SharingTableSchema: GenMessage<SharingTable, SharingTableJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_sharing_v1_models, 2);

/**
 * A schema in a delta sharing service.
 *
 * A schema is a logical grouping of tables.
 * It may contain multiple tables.
 *
 * @generated from message delta_sharing.sharing.v1.SharingSchemaInfo
 */
export type SharingSchemaInfo = Message<"delta_sharing.sharing.v1.SharingSchemaInfo"> & {
  /**
   * Unique identifier for the schema.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The name of the schema.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * The share name that the schema belongs to.
   *
   * @generated from field: string share = 3;
   */
  share: string;

  /**
   * The unique identifier for the share this schema belongs to.
   *
   * @generated from field: optional string share_id = 4;
   */
  shareId?: string;

  /**
   * User-provided free-form text description.
   *
   * @generated from field: optional string description = 5;
   */
  description?: string;

  /**
   * A map of key-value properties attached to the securable.
   *
   * @generated from field: optional google.protobuf.Struct properties = 6;
   */
  properties?: JsonObject;
};

/**
 * A schema in a delta sharing service.
 *
 * A schema is a logical grouping of tables.
 * It may contain multiple tables.
 *
 * @generated from message delta_sharing.sharing.v1.SharingSchemaInfo
 */
export type SharingSchemaInfoJson = {
  /**
   * Unique identifier for the schema.
   *
   * @generated from field: string id = 1;
   */
  id?: string;

  /**
   * The name of the schema.
   *
   * @generated from field: string name = 2;
   */
  name?: string;

  /**
   * The share name that the schema belongs to.
   *
   * @generated from field: string share = 3;
   */
  share?: string;

  /**
   * The unique identifier for the share this schema belongs to.
   *
   * @generated from field: optional string share_id = 4;
   */
  shareId?: string;

  /**
   * User-provided free-form text description.
   *
   * @generated from field: optional string description = 5;
   */
  description?: string;

  /**
   * A map of key-value properties attached to the securable.
   *
   * @generated from field: optional google.protobuf.Struct properties = 6;
   */
  properties?: StructJson;
};

/**
 * Describes the message delta_sharing.sharing.v1.SharingSchemaInfo.
 * Use `create(SharingSchemaInfoSchema)` to create a new message.
 */
export const SharingSchemaInfoSchema: GenMessage<SharingSchemaInfo, SharingSchemaInfoJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_sharing_v1_models, 3);


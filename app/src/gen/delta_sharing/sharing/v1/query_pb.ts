// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true"
// @generated from file delta_sharing/sharing/v1/query.proto (package delta_sharing.sharing.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_buf_validate_validate } from "../../../buf/validate/validate_pb";
import type { Format, FormatJson, Metadata, MetadataJson } from "./protocol_pb";
import { file_delta_sharing_sharing_v1_protocol } from "./protocol_pb";
import { file_google_api_field_behavior } from "../../../google/api/field_behavior_pb";
import { file_google_api_resource } from "../../../google/api/resource_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file delta_sharing/sharing/v1/query.proto.
 */
export const file_delta_sharing_sharing_v1_query: GenFile = /*@__PURE__*/
  fileDesc("CiRkZWx0YV9zaGFyaW5nL3NoYXJpbmcvdjEvcXVlcnkucHJvdG8SGGRlbHRhX3NoYXJpbmcuc2hhcmluZy52MSLTAQoWR2V0VGFibGVWZXJzaW9uUmVxdWVzdBIYCgRuYW1lGAEgASgJQgrgQQK6SARyAhABEhoKBnNjaGVtYRgCIAEoCUIK4EECukgEcgIQARIZCgVzaGFyZRgDIAEoCUIK4EECukgEcgIQARJRChJzdGFydGluZ190aW1lc3RhbXAYBCABKAlCMOBBAbpIKnIoMiZeXGR7NH0tXGR7Mn0tXGR7Mn1UXGR7Mn06XGR7Mn06XGR7Mn1aJEgAiAEBQhUKE19zdGFydGluZ190aW1lc3RhbXAiKgoXR2V0VGFibGVWZXJzaW9uUmVzcG9uc2USDwoHdmVyc2lvbhgBIAEoAyJqChdHZXRUYWJsZU1ldGFkYXRhUmVxdWVzdBIYCgRuYW1lGAEgASgJQgrgQQK6SARyAhABEhkKBXNoYXJlGAIgASgJQgrgQQK6SARyAhABEhoKBnNjaGVtYRgDIAEoCUIK4EECukgEcgIQASKTAQoNUXVlcnlSZXNwb25zZRI8CgdwYXJxdWV0GAEgASgLMikuZGVsdGFfc2hhcmluZy5zaGFyaW5nLnYxLlBhcnF1ZXRSZXNwb25zZUgAEjgKBWRlbHRhGAIgASgLMicuZGVsdGFfc2hhcmluZy5zaGFyaW5nLnYxLkRlbHRhUmVzcG9uc2VIAEIKCghyZXNwb25zZSJPCg9QYXJxdWV0UmVzcG9uc2USPAoHZW50cmllcxgBIAMoCzIrLmRlbHRhX3NoYXJpbmcuc2hhcmluZy52MS5QYXJxdWV0TG9nTWVzc2FnZSKaAQoRUGFycXVldExvZ01lc3NhZ2USPQoIcHJvdG9jb2wYASABKAsyKS5kZWx0YV9zaGFyaW5nLnNoYXJpbmcudjEuUHJvdG9jb2xQYXJxdWV0SAASPQoIbWV0YWRhdGEYAiABKAsyKS5kZWx0YV9zaGFyaW5nLnNoYXJpbmcudjEuTWV0YWRhdGFQYXJxdWV0SABCBwoFZW50cnkiLQoPUHJvdG9jb2xQYXJxdWV0EhoKEm1pbl9yZWFkZXJfdmVyc2lvbhgBIAEoBSLHAQoPTWV0YWRhdGFQYXJxdWV0EgoKAmlkGAEgASgJEhEKBG5hbWUYAiABKAlIAIgBARIYCgtkZXNjcmlwdGlvbhgDIAEoCUgBiAEBEjAKBmZvcm1hdBgEIAEoCzIgLmRlbHRhX3NoYXJpbmcuc2hhcmluZy52MS5Gb3JtYXQSFQoNc2NoZW1hX3N0cmluZxgFIAEoCRIZChFwYXJ0aXRpb25fY29sdW1ucxgGIAMoCUIHCgVfbmFtZUIOCgxfZGVzY3JpcHRpb24iSwoNRGVsdGFSZXNwb25zZRI6CgdlbnRyaWVzGAEgAygLMikuZGVsdGFfc2hhcmluZy5zaGFyaW5nLnYxLkRlbHRhTG9nTWVzc2FnZSKTAQoPRGVsdGFMb2dNZXNzYWdlEjsKCHByb3RvY29sGAEgASgLMicuZGVsdGFfc2hhcmluZy5zaGFyaW5nLnYxLlByb3RvY29sRGVsdGFIABI6CghtZXRhZGF0YRgCIAEoCzImLmRlbHRhX3NoYXJpbmcuc2hhcmluZy52MS5NZXRhZGF0RGVsdGFIAEIHCgVlbnRyeSJHCg1Qcm90b2NvbERlbHRhEhoKEm1pbl9yZWFkZXJfdmVyc2lvbhgBIAEoBRIaChJtaW5fd3JpdGVyX3ZlcnNpb24YAiABKAUirgEKDE1ldGFkYXREZWx0YRI6Cg5kZWx0YV9tZXRhZGF0YRgBIAEoCzIiLmRlbHRhX3NoYXJpbmcuc2hhcmluZy52MS5NZXRhZGF0YRIUCgd2ZXJzaW9uGAIgASgDSACIAQESEQoEc2l6ZRgDIAEoA0gBiAEBEhYKCW51bV9maWxlcxgEIAEoA0gCiAEBQgoKCF92ZXJzaW9uQgcKBV9zaXplQgwKCl9udW1fZmlsZXMiuAEKDUpzb25QcmVkaWNhdGUSCgoCb3AYASABKAkSOQoIY2hpbGRyZW4YAiADKAsyJy5kZWx0YV9zaGFyaW5nLnNoYXJpbmcudjEuSnNvblByZWRpY2F0ZRIRCgRuYW1lGAMgASgJSACIAQESEgoFdmFsdWUYBCABKAlIAYgBARIXCgp2YWx1ZV90eXBlGAUgASgJSAKIAQFCBwoFX25hbWVCCAoGX3ZhbHVlQg0KC192YWx1ZV90eXBlQvsBChxjb20uZGVsdGFfc2hhcmluZy5zaGFyaW5nLnYxQgpRdWVyeVByb3RvUAFaUWdpdGh1Yi5jb20vZGVsdGEtaW5jdWJhdG9yL2RlbHRhLXNoYXJpbmctcnMvZ28vZGVsdGFfc2hhcmluZy9zaGFyaW5nL3YxO3NoYXJpbmd2MaICA0RTWKoCF0RlbHRhU2hhcmluZy5TaGFyaW5nLlYxygIXRGVsdGFTaGFyaW5nXFNoYXJpbmdcVjHiAiNEZWx0YVNoYXJpbmdcU2hhcmluZ1xWMVxHUEJNZXRhZGF0YeoCGURlbHRhU2hhcmluZzo6U2hhcmluZzo6VjFiBnByb3RvMw", [file_buf_validate_validate, file_delta_sharing_sharing_v1_protocol, file_google_api_field_behavior, file_google_api_resource]);

/**
 * Get the version of a table.
 *
 * @generated from message delta_sharing.sharing.v1.GetTableVersionRequest
 */
export type GetTableVersionRequest = Message<"delta_sharing.sharing.v1.GetTableVersionRequest"> & {
  /**
   * The table name to query. It's case-insensitive.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The schema name to query. It's case-insensitive.
   *
   * @generated from field: string schema = 2;
   */
  schema: string;

  /**
   * The share name to query. It's case-insensitive.
   *
   * @generated from field: string share = 3;
   */
  share: string;

  /**
   * The startingTimestamp of the query, a string in the  ISO8601 format, in the UTC timezone,
   * such as 2022-01-01T00:00:00Z. the server needs to return the earliest table version at
   * or after the provided timestamp, can be earlier than the timestamp of table version 0.
   *
   * @generated from field: optional string starting_timestamp = 4;
   */
  startingTimestamp?: string;
};

/**
 * Get the version of a table.
 *
 * @generated from message delta_sharing.sharing.v1.GetTableVersionRequest
 */
export type GetTableVersionRequestJson = {
  /**
   * The table name to query. It's case-insensitive.
   *
   * @generated from field: string name = 1;
   */
  name?: string;

  /**
   * The schema name to query. It's case-insensitive.
   *
   * @generated from field: string schema = 2;
   */
  schema?: string;

  /**
   * The share name to query. It's case-insensitive.
   *
   * @generated from field: string share = 3;
   */
  share?: string;

  /**
   * The startingTimestamp of the query, a string in the  ISO8601 format, in the UTC timezone,
   * such as 2022-01-01T00:00:00Z. the server needs to return the earliest table version at
   * or after the provided timestamp, can be earlier than the timestamp of table version 0.
   *
   * @generated from field: optional string starting_timestamp = 4;
   */
  startingTimestamp?: string;
};

/**
 * Describes the message delta_sharing.sharing.v1.GetTableVersionRequest.
 * Use `create(GetTableVersionRequestSchema)` to create a new message.
 */
export const GetTableVersionRequestSchema: GenMessage<GetTableVersionRequest, GetTableVersionRequestJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_sharing_v1_query, 0);

/**
 * Response for GetTableVersionRequest.
 *
 * @generated from message delta_sharing.sharing.v1.GetTableVersionResponse
 */
export type GetTableVersionResponse = Message<"delta_sharing.sharing.v1.GetTableVersionResponse"> & {
  /**
   * The table version that was requested.
   *
   * @generated from field: int64 version = 1;
   */
  version: bigint;
};

/**
 * Response for GetTableVersionRequest.
 *
 * @generated from message delta_sharing.sharing.v1.GetTableVersionResponse
 */
export type GetTableVersionResponseJson = {
  /**
   * The table version that was requested.
   *
   * @generated from field: int64 version = 1;
   */
  version?: string;
};

/**
 * Describes the message delta_sharing.sharing.v1.GetTableVersionResponse.
 * Use `create(GetTableVersionResponseSchema)` to create a new message.
 */
export const GetTableVersionResponseSchema: GenMessage<GetTableVersionResponse, GetTableVersionResponseJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_sharing_v1_query, 1);

/**
 * Get metadata of a table.
 *
 * @generated from message delta_sharing.sharing.v1.GetTableMetadataRequest
 */
export type GetTableMetadataRequest = Message<"delta_sharing.sharing.v1.GetTableMetadataRequest"> & {
  /**
   * The table name to query. It's case-insensitive.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The share name to query. It's case-insensitive.
   *
   * @generated from field: string share = 2;
   */
  share: string;

  /**
   * The schema name to query. It's case-insensitive.
   *
   * @generated from field: string schema = 3;
   */
  schema: string;
};

/**
 * Get metadata of a table.
 *
 * @generated from message delta_sharing.sharing.v1.GetTableMetadataRequest
 */
export type GetTableMetadataRequestJson = {
  /**
   * The table name to query. It's case-insensitive.
   *
   * @generated from field: string name = 1;
   */
  name?: string;

  /**
   * The share name to query. It's case-insensitive.
   *
   * @generated from field: string share = 2;
   */
  share?: string;

  /**
   * The schema name to query. It's case-insensitive.
   *
   * @generated from field: string schema = 3;
   */
  schema?: string;
};

/**
 * Describes the message delta_sharing.sharing.v1.GetTableMetadataRequest.
 * Use `create(GetTableMetadataRequestSchema)` to create a new message.
 */
export const GetTableMetadataRequestSchema: GenMessage<GetTableMetadataRequest, GetTableMetadataRequestJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_sharing_v1_query, 2);

/**
 * Response for a query against a table.
 *
 * @generated from message delta_sharing.sharing.v1.QueryResponse
 */
export type QueryResponse = Message<"delta_sharing.sharing.v1.QueryResponse"> & {
  /**
   * @generated from oneof delta_sharing.sharing.v1.QueryResponse.response
   */
  response: {
    /**
     * Parquet response format
     *
     * @generated from field: delta_sharing.sharing.v1.ParquetResponse parquet = 1;
     */
    value: ParquetResponse;
    case: "parquet";
  } | {
    /**
     * Delta response format
     *
     * @generated from field: delta_sharing.sharing.v1.DeltaResponse delta = 2;
     */
    value: DeltaResponse;
    case: "delta";
  } | { case: undefined; value?: undefined };
};

/**
 * Response for a query against a table.
 *
 * @generated from message delta_sharing.sharing.v1.QueryResponse
 */
export type QueryResponseJson = {
  /**
   * Parquet response format
   *
   * @generated from field: delta_sharing.sharing.v1.ParquetResponse parquet = 1;
   */
  parquet?: ParquetResponseJson;

  /**
   * Delta response format
   *
   * @generated from field: delta_sharing.sharing.v1.DeltaResponse delta = 2;
   */
  delta?: DeltaResponseJson;
};

/**
 * Describes the message delta_sharing.sharing.v1.QueryResponse.
 * Use `create(QueryResponseSchema)` to create a new message.
 */
export const QueryResponseSchema: GenMessage<QueryResponse, QueryResponseJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_sharing_v1_query, 3);

/**
 * Response for a query against a table in Parquet format.
 *
 * @generated from message delta_sharing.sharing.v1.ParquetResponse
 */
export type ParquetResponse = Message<"delta_sharing.sharing.v1.ParquetResponse"> & {
  /**
   * @generated from field: repeated delta_sharing.sharing.v1.ParquetLogMessage entries = 1;
   */
  entries: ParquetLogMessage[];
};

/**
 * Response for a query against a table in Parquet format.
 *
 * @generated from message delta_sharing.sharing.v1.ParquetResponse
 */
export type ParquetResponseJson = {
  /**
   * @generated from field: repeated delta_sharing.sharing.v1.ParquetLogMessage entries = 1;
   */
  entries?: ParquetLogMessageJson[];
};

/**
 * Describes the message delta_sharing.sharing.v1.ParquetResponse.
 * Use `create(ParquetResponseSchema)` to create a new message.
 */
export const ParquetResponseSchema: GenMessage<ParquetResponse, ParquetResponseJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_sharing_v1_query, 4);

/**
 * Log message for Parquet response.
 *
 * @generated from message delta_sharing.sharing.v1.ParquetLogMessage
 */
export type ParquetLogMessage = Message<"delta_sharing.sharing.v1.ParquetLogMessage"> & {
  /**
   * @generated from oneof delta_sharing.sharing.v1.ParquetLogMessage.entry
   */
  entry: {
    /**
     * @generated from field: delta_sharing.sharing.v1.ProtocolParquet protocol = 1;
     */
    value: ProtocolParquet;
    case: "protocol";
  } | {
    /**
     * @generated from field: delta_sharing.sharing.v1.MetadataParquet metadata = 2;
     */
    value: MetadataParquet;
    case: "metadata";
  } | { case: undefined; value?: undefined };
};

/**
 * Log message for Parquet response.
 *
 * @generated from message delta_sharing.sharing.v1.ParquetLogMessage
 */
export type ParquetLogMessageJson = {
  /**
   * @generated from field: delta_sharing.sharing.v1.ProtocolParquet protocol = 1;
   */
  protocol?: ProtocolParquetJson;

  /**
   * @generated from field: delta_sharing.sharing.v1.MetadataParquet metadata = 2;
   */
  metadata?: MetadataParquetJson;
};

/**
 * Describes the message delta_sharing.sharing.v1.ParquetLogMessage.
 * Use `create(ParquetLogMessageSchema)` to create a new message.
 */
export const ParquetLogMessageSchema: GenMessage<ParquetLogMessage, ParquetLogMessageJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_sharing_v1_query, 5);

/**
 * Protocol for Parquet response.
 *
 * @generated from message delta_sharing.sharing.v1.ProtocolParquet
 */
export type ProtocolParquet = Message<"delta_sharing.sharing.v1.ProtocolParquet"> & {
  /**
   * The minimum version of the protocol that a client must implement
   * in order to correctly read a Delta Lake table.
   *
   * @generated from field: int32 min_reader_version = 1;
   */
  minReaderVersion: number;
};

/**
 * Protocol for Parquet response.
 *
 * @generated from message delta_sharing.sharing.v1.ProtocolParquet
 */
export type ProtocolParquetJson = {
  /**
   * The minimum version of the protocol that a client must implement
   * in order to correctly read a Delta Lake table.
   *
   * @generated from field: int32 min_reader_version = 1;
   */
  minReaderVersion?: number;
};

/**
 * Describes the message delta_sharing.sharing.v1.ProtocolParquet.
 * Use `create(ProtocolParquetSchema)` to create a new message.
 */
export const ProtocolParquetSchema: GenMessage<ProtocolParquet, ProtocolParquetJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_sharing_v1_query, 6);

/**
 * Metadata for Parquet response.
 *
 * @generated from message delta_sharing.sharing.v1.MetadataParquet
 */
export type MetadataParquet = Message<"delta_sharing.sharing.v1.MetadataParquet"> & {
  /**
   * Unique identifier for this table
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * User-provided identifier for this table
   *
   * @generated from field: optional string name = 2;
   */
  name?: string;

  /**
   * User-provided description for this table
   *
   * @generated from field: optional string description = 3;
   */
  description?: string;

  /**
   * Specification of the encoding for the files stored in the table
   *
   * @generated from field: delta_sharing.sharing.v1.Format format = 4;
   */
  format?: Format;

  /**
   * Schema of the table
   *
   * @generated from field: string schema_string = 5;
   */
  schemaString: string;

  /**
   * An array containing the names of columns by which the data should be partitioned
   *
   * @generated from field: repeated string partition_columns = 6;
   */
  partitionColumns: string[];
};

/**
 * Metadata for Parquet response.
 *
 * @generated from message delta_sharing.sharing.v1.MetadataParquet
 */
export type MetadataParquetJson = {
  /**
   * Unique identifier for this table
   *
   * @generated from field: string id = 1;
   */
  id?: string;

  /**
   * User-provided identifier for this table
   *
   * @generated from field: optional string name = 2;
   */
  name?: string;

  /**
   * User-provided description for this table
   *
   * @generated from field: optional string description = 3;
   */
  description?: string;

  /**
   * Specification of the encoding for the files stored in the table
   *
   * @generated from field: delta_sharing.sharing.v1.Format format = 4;
   */
  format?: FormatJson;

  /**
   * Schema of the table
   *
   * @generated from field: string schema_string = 5;
   */
  schemaString?: string;

  /**
   * An array containing the names of columns by which the data should be partitioned
   *
   * @generated from field: repeated string partition_columns = 6;
   */
  partitionColumns?: string[];
};

/**
 * Describes the message delta_sharing.sharing.v1.MetadataParquet.
 * Use `create(MetadataParquetSchema)` to create a new message.
 */
export const MetadataParquetSchema: GenMessage<MetadataParquet, MetadataParquetJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_sharing_v1_query, 7);

/**
 * Response for a query against a table in Delta format.
 *
 * @generated from message delta_sharing.sharing.v1.DeltaResponse
 */
export type DeltaResponse = Message<"delta_sharing.sharing.v1.DeltaResponse"> & {
  /**
   * @generated from field: repeated delta_sharing.sharing.v1.DeltaLogMessage entries = 1;
   */
  entries: DeltaLogMessage[];
};

/**
 * Response for a query against a table in Delta format.
 *
 * @generated from message delta_sharing.sharing.v1.DeltaResponse
 */
export type DeltaResponseJson = {
  /**
   * @generated from field: repeated delta_sharing.sharing.v1.DeltaLogMessage entries = 1;
   */
  entries?: DeltaLogMessageJson[];
};

/**
 * Describes the message delta_sharing.sharing.v1.DeltaResponse.
 * Use `create(DeltaResponseSchema)` to create a new message.
 */
export const DeltaResponseSchema: GenMessage<DeltaResponse, DeltaResponseJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_sharing_v1_query, 8);

/**
 * Log message for Delta response.
 *
 * @generated from message delta_sharing.sharing.v1.DeltaLogMessage
 */
export type DeltaLogMessage = Message<"delta_sharing.sharing.v1.DeltaLogMessage"> & {
  /**
   * @generated from oneof delta_sharing.sharing.v1.DeltaLogMessage.entry
   */
  entry: {
    /**
     * @generated from field: delta_sharing.sharing.v1.ProtocolDelta protocol = 1;
     */
    value: ProtocolDelta;
    case: "protocol";
  } | {
    /**
     * @generated from field: delta_sharing.sharing.v1.MetadatDelta metadata = 2;
     */
    value: MetadatDelta;
    case: "metadata";
  } | { case: undefined; value?: undefined };
};

/**
 * Log message for Delta response.
 *
 * @generated from message delta_sharing.sharing.v1.DeltaLogMessage
 */
export type DeltaLogMessageJson = {
  /**
   * @generated from field: delta_sharing.sharing.v1.ProtocolDelta protocol = 1;
   */
  protocol?: ProtocolDeltaJson;

  /**
   * @generated from field: delta_sharing.sharing.v1.MetadatDelta metadata = 2;
   */
  metadata?: MetadatDeltaJson;
};

/**
 * Describes the message delta_sharing.sharing.v1.DeltaLogMessage.
 * Use `create(DeltaLogMessageSchema)` to create a new message.
 */
export const DeltaLogMessageSchema: GenMessage<DeltaLogMessage, DeltaLogMessageJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_sharing_v1_query, 9);

/**
 * Protocol for Delta response.
 *
 * @generated from message delta_sharing.sharing.v1.ProtocolDelta
 */
export type ProtocolDelta = Message<"delta_sharing.sharing.v1.ProtocolDelta"> & {
  /**
   * The minimum version of the protocol that a client must implement
   * in order to correctly read a Delta Lake table.
   *
   * @generated from field: int32 min_reader_version = 1;
   */
  minReaderVersion: number;

  /**
   * @generated from field: int32 min_writer_version = 2;
   */
  minWriterVersion: number;
};

/**
 * Protocol for Delta response.
 *
 * @generated from message delta_sharing.sharing.v1.ProtocolDelta
 */
export type ProtocolDeltaJson = {
  /**
   * The minimum version of the protocol that a client must implement
   * in order to correctly read a Delta Lake table.
   *
   * @generated from field: int32 min_reader_version = 1;
   */
  minReaderVersion?: number;

  /**
   * @generated from field: int32 min_writer_version = 2;
   */
  minWriterVersion?: number;
};

/**
 * Describes the message delta_sharing.sharing.v1.ProtocolDelta.
 * Use `create(ProtocolDeltaSchema)` to create a new message.
 */
export const ProtocolDeltaSchema: GenMessage<ProtocolDelta, ProtocolDeltaJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_sharing_v1_query, 10);

/**
 * Metadata for Delta response.
 *
 * @generated from message delta_sharing.sharing.v1.MetadatDelta
 */
export type MetadatDelta = Message<"delta_sharing.sharing.v1.MetadatDelta"> & {
  /**
   * Metadata from Delta protocol
   *
   * @generated from field: delta_sharing.sharing.v1.Metadata delta_metadata = 1;
   */
  deltaMetadata?: Metadata;

  /**
   * The table version the metadata corresponds to, returned when querying
   * table data with a version or timestamp parameter, or cdf query
   * with includeHistoricalMetadata set to true.
   *
   * @generated from field: optional int64 version = 2;
   */
  version?: bigint;

  /**
   * The size of the table in bytes, will be returned if available in the delta log.
   *
   * @generated from field: optional int64 size = 3;
   */
  size?: bigint;

  /**
   * The number of files in the table, will be returned if available in the delta log.
   *
   * @generated from field: optional int64 num_files = 4;
   */
  numFiles?: bigint;
};

/**
 * Metadata for Delta response.
 *
 * @generated from message delta_sharing.sharing.v1.MetadatDelta
 */
export type MetadatDeltaJson = {
  /**
   * Metadata from Delta protocol
   *
   * @generated from field: delta_sharing.sharing.v1.Metadata delta_metadata = 1;
   */
  deltaMetadata?: MetadataJson;

  /**
   * The table version the metadata corresponds to, returned when querying
   * table data with a version or timestamp parameter, or cdf query
   * with includeHistoricalMetadata set to true.
   *
   * @generated from field: optional int64 version = 2;
   */
  version?: string;

  /**
   * The size of the table in bytes, will be returned if available in the delta log.
   *
   * @generated from field: optional int64 size = 3;
   */
  size?: string;

  /**
   * The number of files in the table, will be returned if available in the delta log.
   *
   * @generated from field: optional int64 num_files = 4;
   */
  numFiles?: string;
};

/**
 * Describes the message delta_sharing.sharing.v1.MetadatDelta.
 * Use `create(MetadatDeltaSchema)` to create a new message.
 */
export const MetadatDeltaSchema: GenMessage<MetadatDelta, MetadatDeltaJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_sharing_v1_query, 11);

/**
 * @generated from message delta_sharing.sharing.v1.JsonPredicate
 */
export type JsonPredicate = Message<"delta_sharing.sharing.v1.JsonPredicate"> & {
  /**
   * The operation to perform.
   *
   * @generated from field: string op = 1;
   */
  op: string;

  /**
   * The inputs to the operation - if any.
   *
   * @generated from field: repeated delta_sharing.sharing.v1.JsonPredicate children = 2;
   */
  children: JsonPredicate[];

  /**
   * Specifies the name of a column.
   *
   * This is only applicable to column ops.
   *
   * @generated from field: optional string name = 3;
   */
  name?: string;

  /**
   * Specifies the value of a literal.
   *
   * This is only applicable to literal ops.
   *
   * @generated from field: optional string value = 4;
   */
  value?: string;

  /**
   * Specifies the value type of a column or a literal op.
   *
   * This is only applicate to column and literal ops.
   *
   * @generated from field: optional string value_type = 5;
   */
  valueType?: string;
};

/**
 * @generated from message delta_sharing.sharing.v1.JsonPredicate
 */
export type JsonPredicateJson = {
  /**
   * The operation to perform.
   *
   * @generated from field: string op = 1;
   */
  op?: string;

  /**
   * The inputs to the operation - if any.
   *
   * @generated from field: repeated delta_sharing.sharing.v1.JsonPredicate children = 2;
   */
  children?: JsonPredicateJson[];

  /**
   * Specifies the name of a column.
   *
   * This is only applicable to column ops.
   *
   * @generated from field: optional string name = 3;
   */
  name?: string;

  /**
   * Specifies the value of a literal.
   *
   * This is only applicable to literal ops.
   *
   * @generated from field: optional string value = 4;
   */
  value?: string;

  /**
   * Specifies the value type of a column or a literal op.
   *
   * This is only applicate to column and literal ops.
   *
   * @generated from field: optional string value_type = 5;
   */
  valueType?: string;
};

/**
 * Describes the message delta_sharing.sharing.v1.JsonPredicate.
 * Use `create(JsonPredicateSchema)` to create a new message.
 */
export const JsonPredicateSchema: GenMessage<JsonPredicate, JsonPredicateJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_sharing_v1_query, 12);


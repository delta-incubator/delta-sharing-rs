// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true"
// @generated from file delta_sharing/credentials/v1/svc.proto (package delta_sharing.credentials.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_buf_validate_validate } from "../../../buf/validate/validate_pb";
import type { AzureManagedIdentity, AzureManagedIdentityJson, AzureServicePrincipal, AzureServicePrincipalJson, AzureStorageKey, AzureStorageKeyJson, CredentialInfo, CredentialInfoJson, CredentialInfoSchema, Purpose, PurposeJson } from "./models_pb";
import { file_delta_sharing_credentials_v1_models } from "./models_pb";
import { file_gnostic_openapi_v3_annotations } from "../../../gnostic/openapi/v3/annotations_pb";
import { file_google_api_annotations } from "../../../google/api/annotations_pb";
import { file_google_api_client } from "../../../google/api/client_pb";
import { file_google_api_field_behavior } from "../../../google/api/field_behavior_pb";
import { file_google_api_resource } from "../../../google/api/resource_pb";
import type { EmptySchema } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_struct } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file delta_sharing/credentials/v1/svc.proto.
 */
export const file_delta_sharing_credentials_v1_svc: GenFile = /*@__PURE__*/
  fileDesc("CiZkZWx0YV9zaGFyaW5nL2NyZWRlbnRpYWxzL3YxL3N2Yy5wcm90bxIcZGVsdGFfc2hhcmluZy5jcmVkZW50aWFscy52MSLMAQoWTGlzdENyZWRlbnRpYWxzUmVxdWVzdBInCgttYXhfcmVzdWx0cxgCIAEoBUIN4EEBukgHGgUQ6AcgAEgAiAEBEhwKCnBhZ2VfdG9rZW4YAyABKAlCA+BBAUgBiAEBEkAKB3B1cnBvc2UYBCABKA4yJS5kZWx0YV9zaGFyaW5nLmNyZWRlbnRpYWxzLnYxLlB1cnBvc2VCA+BBAUgCiAEBQg4KDF9tYXhfcmVzdWx0c0INCgtfcGFnZV90b2tlbkIKCghfcHVycG9zZSKOAQoXTGlzdENyZWRlbnRpYWxzUmVzcG9uc2USQQoLY3JlZGVudGlhbHMYASADKAsyLC5kZWx0YV9zaGFyaW5nLmNyZWRlbnRpYWxzLnYxLkNyZWRlbnRpYWxJbmZvEhwKD25leHRfcGFnZV90b2tlbhgCIAEoCUgAiAEBQhIKEF9uZXh0X3BhZ2VfdG9rZW4iiQQKF0NyZWF0ZUNyZWRlbnRpYWxSZXF1ZXN0EjIKBG5hbWUYASABKAlCJOBBArpIHnIcMhpeW2Etel1bMC05YS16Ll9dKlswLTlhLXpdJBI7CgdwdXJwb3NlGAIgASgOMiUuZGVsdGFfc2hhcmluZy5jcmVkZW50aWFscy52MS5QdXJwb3NlQgPgQQISGQoHY29tbWVudBgDIAEoCUID4EEBSAGIAQESGwoJcmVhZF9vbmx5GAQgASgIQgPgQQFIAogBARIcCg9za2lwX3ZhbGlkYXRpb24YBSABKAhCA+BBARJWChdhenVyZV9zZXJ2aWNlX3ByaW5jaXBhbBhkIAEoCzIzLmRlbHRhX3NoYXJpbmcuY3JlZGVudGlhbHMudjEuQXp1cmVTZXJ2aWNlUHJpbmNpcGFsSAASVAoWYXp1cmVfbWFuYWdlZF9pZGVudGl0eRhlIAEoCzIyLmRlbHRhX3NoYXJpbmcuY3JlZGVudGlhbHMudjEuQXp1cmVNYW5hZ2VkSWRlbnRpdHlIABJKChFhenVyZV9zdG9yYWdlX2tleRhmIAEoCzItLmRlbHRhX3NoYXJpbmcuY3JlZGVudGlhbHMudjEuQXp1cmVTdG9yYWdlS2V5SABCEwoKY3JlZGVudGlhbBIFukgCCAFCCgoIX2NvbW1lbnRCDAoKX3JlYWRfb25seSJKChRHZXRDcmVkZW50aWFsUmVxdWVzdBIyCgRuYW1lGAEgASgJQiTgQQK6SB5yHDIaXlthLXpdWzAtOWEtei5fXSpbMC05YS16XSQi7gQKF1VwZGF0ZUNyZWRlbnRpYWxSZXF1ZXN0EjIKBG5hbWUYASABKAlCJOBBArpIHnIcMhpeW2Etel1bMC05YS16Ll9dKlswLTlhLXpdJBI7CghuZXdfbmFtZRgCIAEoCUIk4EEBukgechwyGl5bYS16XVswLTlhLXouX10qWzAtOWEtel0kSAGIAQESGQoHY29tbWVudBgDIAEoCUID4EEBSAKIAQESGwoJcmVhZF9vbmx5GAQgASgIQgPgQQFIA4gBARIXCgVvd25lchgFIAEoCUID4EEBSASIAQESIQoPc2tpcF92YWxpZGF0aW9uGAYgASgIQgPgQQFIBYgBARIXCgVmb3JjZRgHIAEoCEID4EEBSAaIAQESVgoXYXp1cmVfc2VydmljZV9wcmluY2lwYWwYZCABKAsyMy5kZWx0YV9zaGFyaW5nLmNyZWRlbnRpYWxzLnYxLkF6dXJlU2VydmljZVByaW5jaXBhbEgAElQKFmF6dXJlX21hbmFnZWRfaWRlbnRpdHkYZSABKAsyMi5kZWx0YV9zaGFyaW5nLmNyZWRlbnRpYWxzLnYxLkF6dXJlTWFuYWdlZElkZW50aXR5SAASSgoRYXp1cmVfc3RvcmFnZV9rZXkYZiABKAsyLS5kZWx0YV9zaGFyaW5nLmNyZWRlbnRpYWxzLnYxLkF6dXJlU3RvcmFnZUtleUgAQgwKCmNyZWRlbnRpYWxCCwoJX25ld19uYW1lQgoKCF9jb21tZW50QgwKCl9yZWFkX29ubHlCCAoGX293bmVyQhIKEF9za2lwX3ZhbGlkYXRpb25CCAoGX2ZvcmNlIk0KF0RlbGV0ZUNyZWRlbnRpYWxSZXF1ZXN0EjIKBG5hbWUYASABKAlCJOBBArpIHnIcMhpeW2Etel1bMC05YS16Ll9dKlswLTlhLXpdJDLPBgoSQ3JlZGVudGlhbHNTZXJ2aWNlEqgBCg9MaXN0Q3JlZGVudGlhbHMSNC5kZWx0YV9zaGFyaW5nLmNyZWRlbnRpYWxzLnYxLkxpc3RDcmVkZW50aWFsc1JlcXVlc3QaNS5kZWx0YV9zaGFyaW5nLmNyZWRlbnRpYWxzLnYxLkxpc3RDcmVkZW50aWFsc1Jlc3BvbnNlIii6RxEqD0xpc3RDcmVkZW50aWFsc4LT5JMCDhIML2NyZWRlbnRpYWxzEqUBChBDcmVhdGVDcmVkZW50aWFsEjUuZGVsdGFfc2hhcmluZy5jcmVkZW50aWFscy52MS5DcmVhdGVDcmVkZW50aWFsUmVxdWVzdBosLmRlbHRhX3NoYXJpbmcuY3JlZGVudGlhbHMudjEuQ3JlZGVudGlhbEluZm8iLLpHEioQQ3JlYXRlQ3JlZGVudGlhbILT5JMCEToBKiIML2NyZWRlbnRpYWxzEqABCg1HZXRDcmVkZW50aWFsEjIuZGVsdGFfc2hhcmluZy5jcmVkZW50aWFscy52MS5HZXRDcmVkZW50aWFsUmVxdWVzdBosLmRlbHRhX3NoYXJpbmcuY3JlZGVudGlhbHMudjEuQ3JlZGVudGlhbEluZm8iLbpHDyoNR2V0Q3JlZGVudGlhbILT5JMCFRITL2NyZWRlbnRpYWxzL3tuYW1lfRKsAQoQVXBkYXRlQ3JlZGVudGlhbBI1LmRlbHRhX3NoYXJpbmcuY3JlZGVudGlhbHMudjEuVXBkYXRlQ3JlZGVudGlhbFJlcXVlc3QaLC5kZWx0YV9zaGFyaW5nLmNyZWRlbnRpYWxzLnYxLkNyZWRlbnRpYWxJbmZvIjO6RxIqEFVwZGF0ZUNyZWRlbnRpYWyC0+STAhg6ASoyEy9jcmVkZW50aWFscy97bmFtZX0SkwEKEERlbGV0ZUNyZWRlbnRpYWwSNS5kZWx0YV9zaGFyaW5nLmNyZWRlbnRpYWxzLnYxLkRlbGV0ZUNyZWRlbnRpYWxSZXF1ZXN0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IjC6RxIqEERlbGV0ZUNyZWRlbnRpYWyC0+STAhUqEy9jcmVkZW50aWFscy97bmFtZX1ClQIKIGNvbS5kZWx0YV9zaGFyaW5nLmNyZWRlbnRpYWxzLnYxQghTdmNQcm90b1ABWllnaXRodWIuY29tL2RlbHRhLWluY3ViYXRvci9kZWx0YS1zaGFyaW5nLXJzL2dvL2RlbHRhX3NoYXJpbmcvY3JlZGVudGlhbHMvdjE7Y3JlZGVudGlhbHN2MaICA0RDWKoCG0RlbHRhU2hhcmluZy5DcmVkZW50aWFscy5WMcoCG0RlbHRhU2hhcmluZ1xDcmVkZW50aWFsc1xWMeICJ0RlbHRhU2hhcmluZ1xDcmVkZW50aWFsc1xWMVxHUEJNZXRhZGF0YeoCHURlbHRhU2hhcmluZzo6Q3JlZGVudGlhbHM6OlYxYgZwcm90bzM", [file_buf_validate_validate, file_delta_sharing_credentials_v1_models, file_gnostic_openapi_v3_annotations, file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_empty, file_google_protobuf_struct]);

/**
 * @generated from message delta_sharing.credentials.v1.ListCredentialsRequest
 */
export type ListCredentialsRequest = Message<"delta_sharing.credentials.v1.ListCredentialsRequest"> & {
  /**
   * The maximum number of results per page that should be returned.
   *
   * @generated from field: optional int32 max_results = 2;
   */
  maxResults?: number;

  /**
   * Opaque pagination token to go to next page based on previous query.
   *
   * @generated from field: optional string page_token = 3;
   */
  pageToken?: string;

  /**
   * Return only credentials for the specified purpose.
   *
   * @generated from field: optional delta_sharing.credentials.v1.Purpose purpose = 4;
   */
  purpose?: Purpose;
};

/**
 * @generated from message delta_sharing.credentials.v1.ListCredentialsRequest
 */
export type ListCredentialsRequestJson = {
  /**
   * The maximum number of results per page that should be returned.
   *
   * @generated from field: optional int32 max_results = 2;
   */
  maxResults?: number;

  /**
   * Opaque pagination token to go to next page based on previous query.
   *
   * @generated from field: optional string page_token = 3;
   */
  pageToken?: string;

  /**
   * Return only credentials for the specified purpose.
   *
   * @generated from field: optional delta_sharing.credentials.v1.Purpose purpose = 4;
   */
  purpose?: PurposeJson;
};

/**
 * Describes the message delta_sharing.credentials.v1.ListCredentialsRequest.
 * Use `create(ListCredentialsRequestSchema)` to create a new message.
 */
export const ListCredentialsRequestSchema: GenMessage<ListCredentialsRequest, ListCredentialsRequestJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_credentials_v1_svc, 0);

/**
 * @generated from message delta_sharing.credentials.v1.ListCredentialsResponse
 */
export type ListCredentialsResponse = Message<"delta_sharing.credentials.v1.ListCredentialsResponse"> & {
  /**
   * The credentials returned.
   *
   * @generated from field: repeated delta_sharing.credentials.v1.CredentialInfo credentials = 1;
   */
  credentials: CredentialInfo[];

  /**
   * The next_page_token value to include in the next List request.
   *
   * @generated from field: optional string next_page_token = 2;
   */
  nextPageToken?: string;
};

/**
 * @generated from message delta_sharing.credentials.v1.ListCredentialsResponse
 */
export type ListCredentialsResponseJson = {
  /**
   * The credentials returned.
   *
   * @generated from field: repeated delta_sharing.credentials.v1.CredentialInfo credentials = 1;
   */
  credentials?: CredentialInfoJson[];

  /**
   * The next_page_token value to include in the next List request.
   *
   * @generated from field: optional string next_page_token = 2;
   */
  nextPageToken?: string;
};

/**
 * Describes the message delta_sharing.credentials.v1.ListCredentialsResponse.
 * Use `create(ListCredentialsResponseSchema)` to create a new message.
 */
export const ListCredentialsResponseSchema: GenMessage<ListCredentialsResponse, ListCredentialsResponseJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_credentials_v1_svc, 1);

/**
 * Create a new credential
 *
 * @generated from message delta_sharing.credentials.v1.CreateCredentialRequest
 */
export type CreateCredentialRequest = Message<"delta_sharing.credentials.v1.CreateCredentialRequest"> & {
  /**
   * The credential name. The name must be unique among storage and service credentials within the metastore.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The credential purpose.
   *
   * @generated from field: delta_sharing.credentials.v1.Purpose purpose = 2;
   */
  purpose: Purpose;

  /**
   * Comment associated with the credential.
   *
   * @generated from field: optional string comment = 3;
   */
  comment?: string;

  /**
   * Whether the credential is usable only for read operations. Only applicable when purpose is STORAGE.
   *
   * @generated from field: optional bool read_only = 4;
   */
  readOnly?: boolean;

  /**
   * Supplying true to this argument skips validation of the created set of credentials.
   *
   * @generated from field: bool skip_validation = 5;
   */
  skipValidation: boolean;

  /**
   * @generated from oneof delta_sharing.credentials.v1.CreateCredentialRequest.credential
   */
  credential: {
    /**
     * @generated from field: delta_sharing.credentials.v1.AzureServicePrincipal azure_service_principal = 100;
     */
    value: AzureServicePrincipal;
    case: "azureServicePrincipal";
  } | {
    /**
     * @generated from field: delta_sharing.credentials.v1.AzureManagedIdentity azure_managed_identity = 101;
     */
    value: AzureManagedIdentity;
    case: "azureManagedIdentity";
  } | {
    /**
     * @generated from field: delta_sharing.credentials.v1.AzureStorageKey azure_storage_key = 102;
     */
    value: AzureStorageKey;
    case: "azureStorageKey";
  } | { case: undefined; value?: undefined };
};

/**
 * Create a new credential
 *
 * @generated from message delta_sharing.credentials.v1.CreateCredentialRequest
 */
export type CreateCredentialRequestJson = {
  /**
   * The credential name. The name must be unique among storage and service credentials within the metastore.
   *
   * @generated from field: string name = 1;
   */
  name?: string;

  /**
   * The credential purpose.
   *
   * @generated from field: delta_sharing.credentials.v1.Purpose purpose = 2;
   */
  purpose?: PurposeJson;

  /**
   * Comment associated with the credential.
   *
   * @generated from field: optional string comment = 3;
   */
  comment?: string;

  /**
   * Whether the credential is usable only for read operations. Only applicable when purpose is STORAGE.
   *
   * @generated from field: optional bool read_only = 4;
   */
  readOnly?: boolean;

  /**
   * Supplying true to this argument skips validation of the created set of credentials.
   *
   * @generated from field: bool skip_validation = 5;
   */
  skipValidation?: boolean;

  /**
   * @generated from field: delta_sharing.credentials.v1.AzureServicePrincipal azure_service_principal = 100;
   */
  azureServicePrincipal?: AzureServicePrincipalJson;

  /**
   * @generated from field: delta_sharing.credentials.v1.AzureManagedIdentity azure_managed_identity = 101;
   */
  azureManagedIdentity?: AzureManagedIdentityJson;

  /**
   * @generated from field: delta_sharing.credentials.v1.AzureStorageKey azure_storage_key = 102;
   */
  azureStorageKey?: AzureStorageKeyJson;
};

/**
 * Describes the message delta_sharing.credentials.v1.CreateCredentialRequest.
 * Use `create(CreateCredentialRequestSchema)` to create a new message.
 */
export const CreateCredentialRequestSchema: GenMessage<CreateCredentialRequest, CreateCredentialRequestJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_credentials_v1_svc, 2);

/**
 * Get a credential
 *
 * @generated from message delta_sharing.credentials.v1.GetCredentialRequest
 */
export type GetCredentialRequest = Message<"delta_sharing.credentials.v1.GetCredentialRequest"> & {
  /**
   * Name of credential.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Get a credential
 *
 * @generated from message delta_sharing.credentials.v1.GetCredentialRequest
 */
export type GetCredentialRequestJson = {
  /**
   * Name of credential.
   *
   * @generated from field: string name = 1;
   */
  name?: string;
};

/**
 * Describes the message delta_sharing.credentials.v1.GetCredentialRequest.
 * Use `create(GetCredentialRequestSchema)` to create a new message.
 */
export const GetCredentialRequestSchema: GenMessage<GetCredentialRequest, GetCredentialRequestJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_credentials_v1_svc, 3);

/**
 * Update a credential
 *
 * @generated from message delta_sharing.credentials.v1.UpdateCredentialRequest
 */
export type UpdateCredentialRequest = Message<"delta_sharing.credentials.v1.UpdateCredentialRequest"> & {
  /**
   * Name of credential.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Name of credential.
   *
   * @generated from field: optional string new_name = 2;
   */
  newName?: string;

  /**
   * Comment associated with the credential.
   *
   * @generated from field: optional string comment = 3;
   */
  comment?: string;

  /**
   * Whether the credential is usable only for read operations. Only applicable when purpose is STORAGE.
   *
   * @generated from field: optional bool read_only = 4;
   */
  readOnly?: boolean;

  /**
   * Username of current owner of credential.
   *
   * @generated from field: optional string owner = 5;
   */
  owner?: string;

  /**
   * Supply true to this argument to skip validation of the updated credential.
   *
   * @generated from field: optional bool skip_validation = 6;
   */
  skipValidation?: boolean;

  /**
   * Force an update even if there are dependent services (when purpose is SERVICE)
   * or dependent external locations and external tables (when purpose is STORAGE).
   *
   * @generated from field: optional bool force = 7;
   */
  force?: boolean;

  /**
   * @generated from oneof delta_sharing.credentials.v1.UpdateCredentialRequest.credential
   */
  credential: {
    /**
     * @generated from field: delta_sharing.credentials.v1.AzureServicePrincipal azure_service_principal = 100;
     */
    value: AzureServicePrincipal;
    case: "azureServicePrincipal";
  } | {
    /**
     * @generated from field: delta_sharing.credentials.v1.AzureManagedIdentity azure_managed_identity = 101;
     */
    value: AzureManagedIdentity;
    case: "azureManagedIdentity";
  } | {
    /**
     * @generated from field: delta_sharing.credentials.v1.AzureStorageKey azure_storage_key = 102;
     */
    value: AzureStorageKey;
    case: "azureStorageKey";
  } | { case: undefined; value?: undefined };
};

/**
 * Update a credential
 *
 * @generated from message delta_sharing.credentials.v1.UpdateCredentialRequest
 */
export type UpdateCredentialRequestJson = {
  /**
   * Name of credential.
   *
   * @generated from field: string name = 1;
   */
  name?: string;

  /**
   * Name of credential.
   *
   * @generated from field: optional string new_name = 2;
   */
  newName?: string;

  /**
   * Comment associated with the credential.
   *
   * @generated from field: optional string comment = 3;
   */
  comment?: string;

  /**
   * Whether the credential is usable only for read operations. Only applicable when purpose is STORAGE.
   *
   * @generated from field: optional bool read_only = 4;
   */
  readOnly?: boolean;

  /**
   * Username of current owner of credential.
   *
   * @generated from field: optional string owner = 5;
   */
  owner?: string;

  /**
   * Supply true to this argument to skip validation of the updated credential.
   *
   * @generated from field: optional bool skip_validation = 6;
   */
  skipValidation?: boolean;

  /**
   * Force an update even if there are dependent services (when purpose is SERVICE)
   * or dependent external locations and external tables (when purpose is STORAGE).
   *
   * @generated from field: optional bool force = 7;
   */
  force?: boolean;

  /**
   * @generated from field: delta_sharing.credentials.v1.AzureServicePrincipal azure_service_principal = 100;
   */
  azureServicePrincipal?: AzureServicePrincipalJson;

  /**
   * @generated from field: delta_sharing.credentials.v1.AzureManagedIdentity azure_managed_identity = 101;
   */
  azureManagedIdentity?: AzureManagedIdentityJson;

  /**
   * @generated from field: delta_sharing.credentials.v1.AzureStorageKey azure_storage_key = 102;
   */
  azureStorageKey?: AzureStorageKeyJson;
};

/**
 * Describes the message delta_sharing.credentials.v1.UpdateCredentialRequest.
 * Use `create(UpdateCredentialRequestSchema)` to create a new message.
 */
export const UpdateCredentialRequestSchema: GenMessage<UpdateCredentialRequest, UpdateCredentialRequestJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_credentials_v1_svc, 4);

/**
 * Delete a credential
 *
 * @generated from message delta_sharing.credentials.v1.DeleteCredentialRequest
 */
export type DeleteCredentialRequest = Message<"delta_sharing.credentials.v1.DeleteCredentialRequest"> & {
  /**
   * Name of credential.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Delete a credential
 *
 * @generated from message delta_sharing.credentials.v1.DeleteCredentialRequest
 */
export type DeleteCredentialRequestJson = {
  /**
   * Name of credential.
   *
   * @generated from field: string name = 1;
   */
  name?: string;
};

/**
 * Describes the message delta_sharing.credentials.v1.DeleteCredentialRequest.
 * Use `create(DeleteCredentialRequestSchema)` to create a new message.
 */
export const DeleteCredentialRequestSchema: GenMessage<DeleteCredentialRequest, DeleteCredentialRequestJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_credentials_v1_svc, 5);

/**
 * Manage credentials to access external data sources and services
 * as well as generate signed urls for the Delta Sharing service.
 *
 * @generated from service delta_sharing.credentials.v1.CredentialsService
 */
export const CredentialsService: GenService<{
  /**
   * @generated from rpc delta_sharing.credentials.v1.CredentialsService.ListCredentials
   */
  listCredentials: {
    methodKind: "unary";
    input: typeof ListCredentialsRequestSchema;
    output: typeof ListCredentialsResponseSchema;
  },
  /**
   * @generated from rpc delta_sharing.credentials.v1.CredentialsService.CreateCredential
   */
  createCredential: {
    methodKind: "unary";
    input: typeof CreateCredentialRequestSchema;
    output: typeof CredentialInfoSchema;
  },
  /**
   * @generated from rpc delta_sharing.credentials.v1.CredentialsService.GetCredential
   */
  getCredential: {
    methodKind: "unary";
    input: typeof GetCredentialRequestSchema;
    output: typeof CredentialInfoSchema;
  },
  /**
   * @generated from rpc delta_sharing.credentials.v1.CredentialsService.UpdateCredential
   */
  updateCredential: {
    methodKind: "unary";
    input: typeof UpdateCredentialRequestSchema;
    output: typeof CredentialInfoSchema;
  },
  /**
   * @generated from rpc delta_sharing.credentials.v1.CredentialsService.DeleteCredential
   */
  deleteCredential: {
    methodKind: "unary";
    input: typeof DeleteCredentialRequestSchema;
    output: typeof EmptySchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_delta_sharing_credentials_v1_svc, 0);


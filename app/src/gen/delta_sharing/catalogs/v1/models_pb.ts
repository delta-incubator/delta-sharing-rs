// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true"
// @generated from file delta_sharing/catalogs/v1/models.proto (package delta_sharing.catalogs.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_buf_validate_validate } from "../../../buf/validate/validate_pb";
import { file_google_api_field_behavior } from "../../../google/api/field_behavior_pb";
import type { StructJson } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_struct } from "@bufbuild/protobuf/wkt";
import type { JsonObject, Message } from "@bufbuild/protobuf";

/**
 * Describes the file delta_sharing/catalogs/v1/models.proto.
 */
export const file_delta_sharing_catalogs_v1_models: GenFile = /*@__PURE__*/
  fileDesc("CiZkZWx0YV9zaGFyaW5nL2NhdGFsb2dzL3YxL21vZGVscy5wcm90bxIZZGVsdGFfc2hhcmluZy5jYXRhbG9ncy52MSLiBAoLQ2F0YWxvZ0luZm8SDwoCaWQYASABKAlIAIgBARIMCgRuYW1lGAIgASgJEhIKBW93bmVyGAMgASgJSAGIAQESFAoHY29tbWVudBgEIAEoCUgCiAEBEjAKCnByb3BlcnRpZXMYBSABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0SAOIAQESGQoMc3RvcmFnZV9yb290GAYgASgJSASIAQESGgoNcHJvdmlkZXJfbmFtZRgHIAEoCUgFiAEBEhcKCnNoYXJlX25hbWUYCCABKAlIBogBARJBCgxjYXRhbG9nX3R5cGUYCSABKA4yJi5kZWx0YV9zaGFyaW5nLmNhdGFsb2dzLnYxLkNhdGFsb2dUeXBlSAeIAQESIQoKY3JlYXRlZF9hdBjoByABKANCB7pIBCICIABICIgBARIYCgpjcmVhdGVkX2J5GOkHIAEoCUgJiAEBEhgKCnVwZGF0ZWRfYXQY6gcgASgDSAqIAQESGAoKdXBkYXRlZF9ieRjrByABKAlIC4gBARIZCgticm93c2Vfb25seRjsByABKAhIDIgBAUIFCgNfaWRCCAoGX293bmVyQgoKCF9jb21tZW50Qg0KC19wcm9wZXJ0aWVzQg8KDV9zdG9yYWdlX3Jvb3RCEAoOX3Byb3ZpZGVyX25hbWVCDQoLX3NoYXJlX25hbWVCDwoNX2NhdGFsb2dfdHlwZUINCgtfY3JlYXRlZF9hdEINCgtfY3JlYXRlZF9ieUINCgtfdXBkYXRlZF9hdEINCgtfdXBkYXRlZF9ieUIOCgxfYnJvd3NlX29ubHkqWgoLQ2F0YWxvZ1R5cGUSHAoYQ0FUQUxPR19UWVBFX1VOU1BFQ0lGSUVEEAASEwoPTUFOQUdFRF9DQVRBTE9HEAESGAoUREVMVEFTSEFSSU5HX0NBVEFMT0cQAkKDAgodY29tLmRlbHRhX3NoYXJpbmcuY2F0YWxvZ3MudjFCC01vZGVsc1Byb3RvUAFaU2dpdGh1Yi5jb20vZGVsdGEtaW5jdWJhdG9yL2RlbHRhLXNoYXJpbmctcnMvZ28vZGVsdGFfc2hhcmluZy9jYXRhbG9ncy92MTtjYXRhbG9nc3YxogIDRENYqgIYRGVsdGFTaGFyaW5nLkNhdGFsb2dzLlYxygIYRGVsdGFTaGFyaW5nXENhdGFsb2dzXFYx4gIkRGVsdGFTaGFyaW5nXENhdGFsb2dzXFYxXEdQQk1ldGFkYXRh6gIaRGVsdGFTaGFyaW5nOjpDYXRhbG9nczo6VjFiBnByb3RvMw", [file_buf_validate_validate, file_google_api_field_behavior, file_google_protobuf_struct]);

/**
 * A catalog is a root-level namespace that contains schemas.
 *
 * @generated from message delta_sharing.catalogs.v1.CatalogInfo
 */
export type CatalogInfo = Message<"delta_sharing.catalogs.v1.CatalogInfo"> & {
  /**
   * Unique identifier for the catalog.
   *
   * @generated from field: optional string id = 1;
   */
  id?: string;

  /**
   * Name of catalog.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Username of current owner of catalog.
   *
   * @generated from field: optional string owner = 3;
   */
  owner?: string;

  /**
   * User-provided free-form text description.
   *
   * @generated from field: optional string comment = 4;
   */
  comment?: string;

  /**
   * A map of key-value properties attached to the securable.
   *
   * @generated from field: optional google.protobuf.Struct properties = 5;
   */
  properties?: JsonObject;

  /**
   * Storage root URL for managed tables within catalog.
   *
   * @generated from field: optional string storage_root = 6;
   */
  storageRoot?: string;

  /**
   * The name of delta sharing provider.
   *
   * A Delta Sharing catalog is a catalog that is based on a Delta share on a remote sharing server.
   *
   * @generated from field: optional string provider_name = 7;
   */
  providerName?: string;

  /**
   * The name of the share under the share provider.
   *
   * @generated from field: optional string share_name = 8;
   */
  shareName?: string;

  /**
   * The type of the catalog.
   *
   * @generated from field: optional delta_sharing.catalogs.v1.CatalogType catalog_type = 9;
   */
  catalogType?: CatalogType;

  /**
   * Time at which this catalog was created, in epoch milliseconds.
   *
   * @generated from field: optional int64 created_at = 1000;
   */
  createdAt?: bigint;

  /**
   * Username of catalog creator.
   *
   * @generated from field: optional string created_by = 1001;
   */
  createdBy?: string;

  /**
   * Time at which this catalog was last updated, in epoch milliseconds.
   *
   * @generated from field: optional int64 updated_at = 1002;
   */
  updatedAt?: bigint;

  /**
   * Username of user who last modified catalog.
   *
   * @generated from field: optional string updated_by = 1003;
   */
  updatedBy?: string;

  /**
   * Indicates whether the principal is limited to retrieving metadata
   * for the associated object through the BROWSE privilege when include_browse
   * is enabled in the request.
   *
   * @generated from field: optional bool browse_only = 1004;
   */
  browseOnly?: boolean;
};

/**
 * A catalog is a root-level namespace that contains schemas.
 *
 * @generated from message delta_sharing.catalogs.v1.CatalogInfo
 */
export type CatalogInfoJson = {
  /**
   * Unique identifier for the catalog.
   *
   * @generated from field: optional string id = 1;
   */
  id?: string;

  /**
   * Name of catalog.
   *
   * @generated from field: string name = 2;
   */
  name?: string;

  /**
   * Username of current owner of catalog.
   *
   * @generated from field: optional string owner = 3;
   */
  owner?: string;

  /**
   * User-provided free-form text description.
   *
   * @generated from field: optional string comment = 4;
   */
  comment?: string;

  /**
   * A map of key-value properties attached to the securable.
   *
   * @generated from field: optional google.protobuf.Struct properties = 5;
   */
  properties?: StructJson;

  /**
   * Storage root URL for managed tables within catalog.
   *
   * @generated from field: optional string storage_root = 6;
   */
  storageRoot?: string;

  /**
   * The name of delta sharing provider.
   *
   * A Delta Sharing catalog is a catalog that is based on a Delta share on a remote sharing server.
   *
   * @generated from field: optional string provider_name = 7;
   */
  providerName?: string;

  /**
   * The name of the share under the share provider.
   *
   * @generated from field: optional string share_name = 8;
   */
  shareName?: string;

  /**
   * The type of the catalog.
   *
   * @generated from field: optional delta_sharing.catalogs.v1.CatalogType catalog_type = 9;
   */
  catalogType?: CatalogTypeJson;

  /**
   * Time at which this catalog was created, in epoch milliseconds.
   *
   * @generated from field: optional int64 created_at = 1000;
   */
  createdAt?: string;

  /**
   * Username of catalog creator.
   *
   * @generated from field: optional string created_by = 1001;
   */
  createdBy?: string;

  /**
   * Time at which this catalog was last updated, in epoch milliseconds.
   *
   * @generated from field: optional int64 updated_at = 1002;
   */
  updatedAt?: string;

  /**
   * Username of user who last modified catalog.
   *
   * @generated from field: optional string updated_by = 1003;
   */
  updatedBy?: string;

  /**
   * Indicates whether the principal is limited to retrieving metadata
   * for the associated object through the BROWSE privilege when include_browse
   * is enabled in the request.
   *
   * @generated from field: optional bool browse_only = 1004;
   */
  browseOnly?: boolean;
};

/**
 * Describes the message delta_sharing.catalogs.v1.CatalogInfo.
 * Use `create(CatalogInfoSchema)` to create a new message.
 */
export const CatalogInfoSchema: GenMessage<CatalogInfo, CatalogInfoJson> = /*@__PURE__*/
  messageDesc(file_delta_sharing_catalogs_v1_models, 0);

/**
 * The type of the catalog.
 *
 * @generated from enum delta_sharing.catalogs.v1.CatalogType
 */
export enum CatalogType {
  /**
   * Unknown catalog type.
   *
   * @generated from enum value: CATALOG_TYPE_UNSPECIFIED = 0;
   */
  CATALOG_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: MANAGED_CATALOG = 1;
   */
  MANAGED_CATALOG = 1,

  /**
   * @generated from enum value: DELTASHARING_CATALOG = 2;
   */
  DELTASHARING_CATALOG = 2,
}

/**
 * The type of the catalog.
 *
 * @generated from enum delta_sharing.catalogs.v1.CatalogType
 */
export type CatalogTypeJson = "CATALOG_TYPE_UNSPECIFIED" | "MANAGED_CATALOG" | "DELTASHARING_CATALOG";

/**
 * Describes the enum delta_sharing.catalogs.v1.CatalogType.
 */
export const CatalogTypeSchema: GenEnum<CatalogType, CatalogTypeJson> = /*@__PURE__*/
  enumDesc(file_delta_sharing_catalogs_v1_models, 0);

